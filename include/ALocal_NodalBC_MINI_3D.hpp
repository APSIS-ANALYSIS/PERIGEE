#ifndef ALOCAL_NODALBC_MINI_3D_HPP
#define ALOCAL_NODALBC_MINI_3D_HPP
// ==================================================================
// ALocal_NodalBC_MINI_3D.hpp
//
// This class generate the working Nodal BC and LID info for 3D
// MINI elements. The first degree of freedom is assumed to be the
// pressure variable, and hence is not modified. The next three dof
// is assumbed to be the velocity or displacement variable and is
// enriched by a bubble.
// 
// The geo2phy mapping should be generated by the 1-bubble case in the 
// preprocessor and we will use it to update the LID & LDN indices.
//
// NOTE: we do not consider periodic bc case in this class.
//
// Author: Ju Liu
// Date: Feb. 12 2018
// ==================================================================
#include "ALocal_NodalBC_2x2Block.hpp"
#include "APart_Node.hpp"

class ALocal_NodalBC_MINI_3D : public ALocal_NodalBC_2x2Block
{
  public:
    ALocal_NodalBC_MINI_3D( const std::string &fileBaseName,
        const int &cpu_rank, const APart_Node * const &pNode_disp );

    virtual ~ALocal_NodalBC_MINI_3D();

    virtual void print_info() const;

    virtual int get_LID_0( const int &node ) const {return LID_p[node];}

    virtual int get_LID_1( const int &dof_idx, const int &node ) const
    {return LID_u[ dof_idx * ntotnode + node ];}

    virtual int get_LDN_0( const int &node ) const {return LDN[node];}
    
    virtual int get_LDN_1( const int &dof_idx, const int &node ) const
    {return LDN[ LD_offset_u[dof_idx] + node ]; }

    virtual int get_Num_LD_0() const {return Num_LD_p;}
    
    virtual int get_Num_LD_1( const int &dof_idx ) const 
    {return Num_LD_u[dof_idx];}

  private:
    const int ntotnode;
    int Num_LD_p;
    std::vector<int> LID_p; 
    std::vector<int> LID_u, Num_LD_u, LD_offset_u;
    std::vector<int> LDN;
};

#endif
