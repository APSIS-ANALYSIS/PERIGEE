=============================================================================================
                         Configuring PETSc to compile on your system                         
=============================================================================================
Configure Help
   Comma separated lists should be given between [] (use \[ \] in tcsh/csh)
      For example: --with-mpi-lib=\[/usr/local/lib/libmpich.a,/usr/local/lib/libpmpich.a\]
   Options beginning with --known- are to provide values you already know
    Options beginning with --with- indicate that you are requesting something
      For example: --with-clanguage=c++
   <prog> means a program name or a full path to a program
      For example:--with-cmake=/Users/bsmith/bin/cmake
   <bool> means a boolean, use either 0 or 1
   <dir> means a directory
      For example: --with-packages-download-dir=/Users/bsmith/Downloads
   For packages use --with-PACKAGE-dir=<dir> OR
      --with-PACKAGE-include=<dir> --with-PACKAGE-lib=<lib> OR --download-PACKAGE
------------------------------------------------------------------------------------------
Script:
  --h
       Print this help message  current: 0
  --help
       Print this help message  current: 1
  --with-packages-download-dir=<dir>
       Skip network download of package tarballs and locate them in specified dir. If not found in dir, print package URL - so it can be obtained manually.
Framework:
  --configModules
       A list of Python modules with a Configure class  current: PETSc.Configure
  --ignoreCompileOutput=<bool>
       Ignore compiler output  current: 1
  --ignoreLinkOutput=<bool>
       Ignore linker output  current: 0
  --ignoreWarnings=<bool>
       Ignore compiler and linker warnings  current: 0
  --doCleanup=<bool>
       Delete any configure generated files (turn off for debugging)  current: 1
  --with-executables-search-path
       A list of directories used to search for executables  current: <map object at 0x105d75160>
  --with-packages-search-path
       A list of directories used to search for packages  current: <map object at 0x105d75400>
  --with-packages-build-dir=<dir>
       Location to unpack and run the build process for downloaded packages
  --with-batch=<bool>
       Machine using cross-compilers or a batch system to submit jobs  current: 0
  --with-file-create-pause=<bool>
       Add 1 sec pause between config temp file delete/recreate  current: 0
PETSc:
  --prefix=<dir>
       Specifiy location to install PETSc (eg. /usr/local)  current: 
  --with-prefetch=<bool>
       Enable checking for prefetch instructions  current: 1
  --with-default-arch=<bool>
       Allow using the last configured arch without setting PETSC_ARCH  current: 1
  --with-single-library=<bool>
       Put all PETSc code into the single -lpetsc library  current: 1
  --with-fortran-bindings=<bool>
       Build PETSc fortran bindings in the library and corresponding module files  current: 1
  --with-ios=<bool>
       Build an iPhone/iPad version of PETSc library  current: 0
  --with-display=<x11display>
       Specifiy DISPLAY env variable for use with matlab test)  current: 
  --with-package-scripts=<pyscripts>
       Specify configure package scripts for user provided packages
  --with-autoreconf=<prog>
       Specify autoreconf  current: autoreconf
  --with-libtoolize=<prog>
       Specify libtoolize  current: libtoolize
  --with-clanguage=<C or C++>
       Specify C (recommended) or C++ to compile PETSc. You can use C++ in either case.  current: C
  --PETSC_ARCH=<string>
       The configuration name
  --with-petsc-arch=<string>
       The configuration name
  --force=<bool>
       Bypass configure hash caching, and run to completion  current: 0
  --PETSC_DIR=<root-dir>
       The root directory of the PETSc installation
  --with-clean=<bool>
       Delete prior build files including externalpackages  current: 0
  --DATAFILESPATH=<dir>
       Specifiy location of PETSc datafiles, e.g. test matrices
  --with-precision=<__fp16,single,double,__float128>
       Specify numerical precision  current: double
  --with-scalar-type=<real or complex>
       Specify real or complex numbers  current: real
  --with-64-bit-indices=<bool>
       Use 64 bit integers (long long) for indexing in vectors and matrices  current: 0
  --with-shared-libraries=<bool>
       Make PETSc libraries shared -- libpetsc.so (Unix/Linux) or libpetsc.dylib (Mac)  current: 1
  --with-serialize-functions=<bool>
       Allows function pointers to be serialized to binary files with string representations  current: 0
  --with-debugger=<gdb,dbx,etc>
       Debugger to use in PETSc
  --with-log=<bool>
       Activate logging code in PETSc  current: 1
  --with-threadsafety=<bool>
       Allow individual threads in PETSc to call PETSc routines  current: 0
  --with-info=<bool>
       Activate PetscInfo() (i.e. -info)  code in PETSc  current: 1
  --with-ctable=<bool>
       Activate CTABLE hashing for certain search functions - to conserve memory  current: 1
  --with-fortran-kernels=<bool>
       Use Fortran for linear algebra kernels  current: 0
  --with-avx512-kernels=<bool>
       Use AVX-512 intrinsics for linear algebra kernels when available  current: 1
  --with-is-color-value-type=<char,short>
       char, short can store 256, 65536 colors  current: short
  --with-memalign=<4,8,16,32,64>
       Specify alignment of arrays allocated by PETSc  current: 16
  --known-level1-dcache-linesize=<int>
       Size in bytes of each line of the Level 1 data cache
  --with-proc-filesystem=<bool>
       Use the /proc filesystem for system statistics  current: 1
  --with-macos-firewall-rules=<bool>
       On macOS, activates automatic addition of firewall rules (blocking incoming connections) to prevent firewall popup windows during testing. Uses sudo so gmakefile.test will ask for your password.  current: 0
  --with-python-exec=<executable>
       Alternate Python executable to use for mpi4py/petsc4py
  --have-numpy=<bool>
       Whether numpy python module is installed (default: autodetect)
  --with-petsc4py=<bool>
       Build PETSc Python bindings (petsc4py)  current: 0
  --with-petsc4py-test-np=<np>
       Number of processes to use for petsc4py tests
  --with-numpy-include=<dir>
       Path to numpy headers from numpy.get_include() (default: autodetect)
Windows:
  --with-windows-graphics=<bool>
       Enable check for Windows Graphics  current: 1
Compilers:
  --with-cpp=<prog>
       Specify the C preprocessor
  --CPP=<prog>
       Specify the C preprocessor
  --CPPFLAGS=<string>
       Specify the C only (not used for C++ or FC) preprocessor options  current: 
  --with-cc=<prog>
       Specify the C compiler
  --CC=<prog>
       Specify the C compiler
  --CFLAGS=<string>
       Specify the C compiler options
  --CC_LINKER_FLAGS=<string>
       Specify the C linker flags  current: <map object at 0x105d75160>
  --CXXPP=<prog>
       Specify the C++ preprocessor
  --CXXPPFLAGS=<string>
       Specify the C++ preprocessor options
  --with-cxx=<prog>
       Specify the C++ compiler
  --CXX=<prog>
       Specify the C++ compiler
  --CXXFLAGS=<string>
       Specify the C++ compiler options, also passed to linker
  --CXX_CXXFLAGS=<string>
       Specify the C++ compiler-only options, not passed to linker  current: 
  --CXX_LINKER_FLAGS=<string>
       Specify the C++ linker flags  current: <map object at 0x105d75400>
  --FPP=<prog>
       Specify the Fortran preprocessor
  --FPPFLAGS=<string>
       Specify the Fortran preprocessor options
  --with-fc=<prog>
       Specify the Fortran compiler
  --FC=<prog>
       Specify the Fortran compiler
  --FFLAGS=<string>
       Specify the Fortran compiler options
  --FC_LINKER_FLAGS=<string>
       Specify the FC linker flags  current: <map object at 0x105d75160>
  --with-large-file-io=<bool>
       Allow IO with files greater then 2 GB  current: 0
  --CUDAPP=<prog>
       Specify the CUDA preprocessor
  --CUDAPPFLAGS=<string>
       Specify the CUDA preprocessor options  current: -Wno-deprecated-gpu-targets
  --with-cudac=<prog>
       Specify the CUDA compiler
  --CUDAC=<prog>
       Specify the CUDA compiler
  --CUDAFLAGS=<string>
       Specify the CUDA compiler options
  --CUDAC_LINKER_FLAGS=<string>
       Specify the CUDA linker flags  current: <map object at 0x105d75400>
  --HIPPP=<prog>
       Specify the HIP preprocessor
  --HIPPPFLAGS=<string>
       Specify the HIP preprocessor options
  --with-hipc=<prog>
       Specify the HIP compiler
  --HIPC=<prog>
       Specify the HIP compiler
  --HIPFLAGS=<string>
       Specify the HIP compiler options
  --HIPC_LINKER_FLAGS=<string>
       Specify the HIP linker flags  current: <map object at 0x105d75160>
  --SYCLPP=<prog>
       Specify the SYCL preprocessor
  --SYCLPPFLAGS=<string>
       Specify the SYCL preprocessor options
  --with-syclc=<prog>
       Specify the SYCL compiler
  --SYCLC=<prog>
       Specify the SYCL compiler
  --SYCLFLAGS=<string>
       Specify the SYCL compiler options
  --SYCLC_LINKER_FLAGS=<string>
       Specify the SYCL linker flags  current: <map object at 0x105d75400>
  --with-shared-ld=<prog>
       Specify the shared linker
  --LD_SHARED=<prog>
       Specify the shared linker
  --LDFLAGS=<string>
       Specify the linker options  current: 
  --with-ar=<prog>
       Specify the archiver
  --AR=<prog>
       Specify the archiver flags
  --AR_FLAGS=<string>
       Specify the archiver flags
  --with-ranlib=<prog>
       Specify ranlib
  --with-pic=<bool>
       Compile with -fPIC or equivalent flag if possible  current: 0
  --sharedLibraryFlags=<string>
       Specify the shared library flags  current: <map object at 0x105d75160>
  --dynamicLibraryFlags=<string>
       Specify the dynamic library flags  current: <map object at 0x105d75400>
  --LIBS=<string>
       Specify extra libraries for all links
  --with-environment-variables=<bool>
       Use compiler variables found in environment  current: 0
  --with-cxx-dialect=<dialect>
       Dialect under which to compile C++ sources. Pass "c++17" to use "-std=c++17", "gnu++17" to use "-std=gnu++17" or pass just the numer (e.g. "17") to have PETSc auto-detect gnu extensions. Pass "auto" to let PETSc auto-detect everything or "0" to use the compiler"s default. Available: (11, 14, 17, auto, 0)  current: auto
  --with-hip-dialect=<dialect>
       Dialect under which to compile HIP sources. If set should probably be equivalent to c++ dialect (see --with-cxx-dialect)  current: auto
  --with-cuda-dialect=<dialect>
       Dialect under which to compile CUDA sources. If set should probably be equivalent to c++ dialect (see --with-cxx-dialect)  current: auto
  --with-sycl-dialect=<dialect>
       Dialect under which to compile SYCL sources. If set should probably be equivalent to c++ dialect (see --with-cxx-dialect)  current: auto
  --with-clib-autodetect=<bool>
       Autodetect C compiler libraries  current: 1
  --with-fortranlib-autodetect=<bool>
       Autodetect Fortran compiler libraries  current: 1
  --with-cxxlib-autodetect=<bool>
       Autodetect C++ compiler libraries  current: 1
  --with-dependencies=<bool>
       Compile with -MMD or equivalent flag if possible  current: 1
  --with-fortran-type-initialize=<bool>
       Initialize PETSc objects in Fortran  current: 1
Compiler Flags:
  --optionsModule=<module name>
       The Python module used to determine compiler options and versions  current: config.compilerOptions
  --with-debugging=<bool>
       Specify debugging version of libraries  current: 1
  --C_VERSION=<string>
       The version of the C compiler  current: Unknown
  --CXX_VERSION=<string>
       The version of the C++ compiler  current: Unknown
  --FC_VERSION=<string>
       The version of the Fortran compiler  current: Unknown
  --CUDA_VERSION=<string>
       The version of the CUDA compiler  current: Unknown
  --HIP_VERSION=<string>
       The version of the HIP compiler  current: Unknown
  --SYCL_VERSION=<string>
       The version of the SYCL compiler  current: Unknown
  --COPTFLAGS=<string>
       Override the debugging/optimization flags for the C compiler
  --CXXOPTFLAGS=<string>
       Override the debugging/optimization flags for the C++ compiler
  --FOPTFLAGS=<string>
       Override the debugging/optimization flags for the Fortran compiler
  --CUDAOPTFLAGS=<string>
       Override the debugging/optimization flags for the CUDA compiler
  --HIPOPTFLAGS=<string>
       Override the debugging/optimization flags for the HIP compiler
  --SYCLOPTFLAGS=<string>
       Override the debugging/optimization flags for the SYCL compiler
  --with-gcov=<bool>
       Specify that GNUs coverage tool gcov is used  current: 0
SourceControl:
  --with-git=<prog>
       Specify the Git executable  current: git
  --with-hg=<prog>
       Specify the Mercurial executable  current: hg
Visibility:
  --with-visibility=<bool>
       Use compiler visibility flags to limit symbol visibility  current: 1
MAKE:
  --with-make=<bool>
       Indicate if you wish to test for make  current: 0
  --with-make-dir=<dir>
       Indicate the root directory of the make installation
  --with-make-pkg-config=<dir>
       Look for make using pkg-config utility optional directory to look in
  --with-make-include=<dirs>
       Indicate the directory of the make include files
  --with-make-lib=<libraries: e.g. [/Users/..../libmake.a,...]>
       Indicate the make libraries
  --download-make=<no,yes,filename,url>
       Download and install make  current: no
  --download-make-commit=commitid
       The commit id from a git repository to use for the build of make  current: 0
  --download-make-shared=<bool>
       Install MAKE with shared libraries  current: 0
  --download-make-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of make  current: 0
  --with-make-np=<np>
       Default number of processes to use for parallel builds
  --with-make-test-np=<np>
       Default number of processes to use for parallel tests
  --with-make-load=<load>
       max load to use for parallel builds
  --download-make-cc=<prog>
       C compiler for GNU make configure
  --with-make-exec=<executable>
       Make executable to look for
BLASLAPACK:
  --with-blaslapack=<bool>
       Indicate if you wish to test for BlasLapack  current: 1
  --with-blaslapack-dir=<dir>
       Indicate the root directory of the BlasLapack installation
  --with-blaslapack-pkg-config=<dir>
       Look for BlasLapack using pkg-config utility optional directory to look in
  --with-blaslapack-include=<dirs>
       Indicate the directory of the BlasLapack include files
  --with-blaslapack-lib=<libraries: e.g. [/Users/..../libblaslapack.a,...]>
       Indicate the BlasLapack libraries
BLAS/LAPACK:
  --with-blas-lib=<libraries: e.g. [/Users/..../libblas.a,...]>
       Indicate the library(s) containing BLAS
  --with-lapack-lib=<libraries: e.g. [/Users/..../liblapack.a,...]>
       Indicate the library(s) containing LAPACK
  --with-blaslapack-suffix=<string>
       Indicate a suffix for BLAS/LAPACK subroutine names.
  --with-64-bit-blas-indices
       Try to use 64 bit integers for BLAS/LAPACK; will error if not available  current: 0
  --known-64-bit-blas-indices=<bool>
       Indicate if using 64 bit integer BLAS
MPI:
  --with-mpi=<bool>
       Indicate if you wish to test for MPI  current: 1
  --with-mpi-dir=<dir>
       Indicate the root directory of the MPI installation
  --with-mpi-pkg-config=<dir>
       Look for MPI using pkg-config utility optional directory to look in
  --with-mpi-include=<dirs>
       Indicate the directory of the MPI include files
  --with-mpi-lib=<libraries: e.g. [/Users/..../libmpi.a,...]>
       Indicate the MPI libraries
  --with-mpiexec=<prog>
       The utility used to launch MPI jobs. (should support "-n <np>" option)
  --with-mpi-compilers=<bool>
       Try to use the MPI compilers, e.g. mpicc  current: 1
  --known-mpi-shared-libraries=<bool>
       Indicates the MPI libraries are shared (the usual test will be skipped)
  --with-mpi-f90module-visibility=<bool>
       Indicates the MPI f90 module is available via petsc module. When disabled, mpi_f08 can be used from user code  current: 1
MPICH:
  --download-mpich=<no,yes,filename,url>
       Download and install MPICH  current: no
  --download-mpich-commit=commitid
       The commit id from a git repository to use for the build of MPICH  current: 0
  --download-mpich-shared=<bool>
       Install MPICH with shared libraries  current: 0
  --download-mpich-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of MPICH  current: 0
  --download-mpich-pm=<hydra, gforker or mpd>
       Launcher for MPI processes  current: hydra
  --download-mpich-device=<ch3:nemesis or see MPICH docs>
       Communicator for MPI processes
CUDA:
  --with-cuda=<bool>
       Indicate if you wish to test for cuda  current: 0
  --with-cuda-dir=<dir>
       Indicate the root directory of the cuda installation
  --with-cuda-pkg-config=<dir>
       Look for cuda using pkg-config utility optional directory to look in
  --with-cuda-include=<dirs>
       Indicate the directory of the cuda include files
  --with-cuda-lib=<libraries: e.g. [/Users/..../libcuda.a,...]>
       Indicate the cuda libraries
  --with-cuda-arch
       Cuda architecture for code generation, for example 70, (this may be used by external packages), use all to build a fat binary for distribution
THRUST:
  --with-thrust=<bool>
       Indicate if you wish to test for thrust  current: 0
  --with-thrust-dir=<dir>
       Indicate the root directory of the thrust installation
  --with-thrust-pkg-config=<dir>
       Look for thrust using pkg-config utility optional directory to look in
  --with-thrust-include=<dirs>
       Indicate the directory of the thrust include files
  --with-thrust-lib=<libraries: e.g. [/Users/..../libthrust.a,...]>
       Indicate the thrust libraries
  --download-thrust=<no,yes,filename,url>
       Download and install thrust  current: no
  --download-thrust-commit=commitid
       The commit id from a git repository to use for the build of thrust  current: 0
  --download-thrust-shared=<bool>
       Install THRUST with shared libraries  current: 0
  --download-thrust-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of thrust  current: 0
HWLOC:
  --with-hwloc=<bool>
       Indicate if you wish to test for hwloc  current: 0
  --with-hwloc-dir=<dir>
       Indicate the root directory of the hwloc installation
  --with-hwloc-pkg-config=<dir>
       Look for hwloc using pkg-config utility optional directory to look in
  --with-hwloc-include=<dirs>
       Indicate the directory of the hwloc include files
  --with-hwloc-lib=<libraries: e.g. [/Users/..../libhwloc.a,...]>
       Indicate the hwloc libraries
  --download-hwloc=<no,yes,filename,url>
       Download and install hwloc  current: no
  --download-hwloc-commit=commitid
       The commit id from a git repository to use for the build of hwloc  current: 0
  --download-hwloc-shared=<bool>
       Install HWLOC with shared libraries  current: 0
  --download-hwloc-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of hwloc  current: 0
X:
  --with-x=<bool>
       Indicate if you wish to test for X  current: 1
  --with-x-dir=<dir>
       Indicate the root directory of the X installation
  --with-x-pkg-config=<dir>
       Look for X using pkg-config utility optional directory to look in
  --with-x-include=<dirs>
       Indicate the directory of the X include files
  --with-x-lib=<libraries: e.g. [/Users/..../libx.a,...]>
       Indicate the X libraries
OPENMPI:
  --download-openmpi=<no,yes,filename,url>
       Download and install OpenMPI  current: no
  --download-openmpi-commit=commitid
       The commit id from a git repository to use for the build of OpenMPI  current: 0
  --download-openmpi-shared=<bool>
       Install OPENMPI with shared libraries  current: 0
  --download-openmpi-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of OpenMPI  current: 0
HIP:
  --with-hip=<bool>
       Indicate if you wish to test for hip  current: 0
  --with-hip-dir=<dir>
       Indicate the root directory of the hip installation
  --with-hip-pkg-config=<dir>
       Look for hip using pkg-config utility optional directory to look in
  --with-hip-include=<dirs>
       Indicate the directory of the hip include files
  --with-hip-lib=<libraries: e.g. [/Users/..../libhip.a,...]>
       Indicate the hip libraries
  --with-hip-arch
       AMD GPU architecture for code generation, for example gfx908, (this may be used by external packages)
SYCL:
  --with-sycl=<bool>
       Indicate if you wish to test for sycl  current: 0
  --with-sycl-dir=<dir>
       Indicate the root directory of the sycl installation
  --with-sycl-pkg-config=<dir>
       Look for sycl using pkg-config utility optional directory to look in
  --with-sycl-include=<dirs>
       Indicate the directory of the sycl include files
  --with-sycl-lib=<libraries: e.g. [/Users/..../libsycl.a,...]>
       Indicate the sycl libraries
  --with-sycl-arch
       Intel GPU architecture for code generation, for example gen9, xehp (this may be used by external packages)
F2CBLASLAPACK:
  --download-f2cblaslapack=<no,yes,filename,url>
       Download and install f2cblaslapack  current: no
  --download-f2cblaslapack-commit=commitid
       The commit id from a git repository to use for the build of f2cblaslapack  current: 0
BLIS:
  --with-blis=<bool>
       Indicate if you wish to test for blis  current: 0
  --with-blis-dir=<dir>
       Indicate the root directory of the blis installation
  --with-blis-pkg-config=<dir>
       Look for blis using pkg-config utility optional directory to look in
  --with-blis-include=<dirs>
       Indicate the directory of the blis include files
  --with-blis-lib=<libraries: e.g. [/Users/..../libblis.a,...]>
       Indicate the blis libraries
  --download-blis=<no,yes,filename,url>
       Download and install blis  current: no
  --download-blis-commit=commitid
       The commit id from a git repository to use for the build of blis  current: 0
  --download-blis-use-pthreads=<bool>
       Use pthreads threading support for blis  current: 0
  --download-blis-enable-cblas-headers=<bool>
       Enable CBLAS headers for blis  current: 0
OPENMP:
  --with-openmp=<bool>
       Indicate if you wish to test for openmp  current: 0
  --with-openmp-dir=<dir>
       Indicate the root directory of the openmp installation
  --with-openmp-pkg-config=<dir>
       Look for openmp using pkg-config utility optional directory to look in
  --with-openmp-include=<dirs>
       Indicate the directory of the openmp include files
  --with-openmp-lib=<libraries: e.g. [/Users/..../libopenmp.a,...]>
       Indicate the openmp libraries
PTHREAD:
  --with-pthread=<bool>
       Indicate if you wish to test for pthread  current: 1
  --with-pthread-dir=<dir>
       Indicate the root directory of the pthread installation
  --with-pthread-pkg-config=<dir>
       Look for pthread using pkg-config utility optional directory to look in
  --with-pthread-include=<dirs>
       Indicate the directory of the pthread include files
  --with-pthread-lib=<libraries: e.g. [/Users/..../libpthread.a,...]>
       Indicate the pthread libraries
FBLASLAPACK:
  --download-fblaslapack=<no,yes,filename,url>
       Download and install fblaslapack  current: no
  --download-fblaslapack-commit=commitid
       The commit id from a git repository to use for the build of fblaslapack  current: 0
OPENBLAS:
  --with-openblas=<bool>
       Indicate if you wish to test for openblas  current: 0
  --with-openblas-dir=<dir>
       Indicate the root directory of the openblas installation
  --with-openblas-pkg-config=<dir>
       Look for openblas using pkg-config utility optional directory to look in
  --with-openblas-include=<dirs>
       Indicate the directory of the openblas include files
  --with-openblas-lib=<libraries: e.g. [/Users/..../libopenblas.a,...]>
       Indicate the openblas libraries
  --download-openblas=<no,yes,filename,url>
       Download and install openblas  current: no
  --download-openblas-commit=commitid
       The commit id from a git repository to use for the build of openblas  current: 0
  --download-openblas-64-bit-blas-indices
       Use 64 bit integers for OpenBLAS (deprecated: use --with-64-bit-blas-indices  current: 0
  --download-openblas-use-pthreads
       Use pthreads for OpenBLAS  current: 0
  --download-openblas-make-options=<options>
       additional options for building OpenBLAS
ADIOS:
  --with-adios=<bool>
       Indicate if you wish to test for ADIOS  current: 0
  --with-adios-dir=<dir>
       Indicate the root directory of the ADIOS installation
  --with-adios-pkg-config=<dir>
       Look for ADIOS using pkg-config utility optional directory to look in
  --with-adios-include=<dirs>
       Indicate the directory of the ADIOS include files
  --with-adios-lib=<libraries: e.g. [/Users/..../libadios.a,...]>
       Indicate the ADIOS libraries
  --download-adios=<no,yes,filename,url>
       Download and install ADIOS  current: no
  --download-adios-commit=commitid
       The commit id from a git repository to use for the build of ADIOS  current: 0
  --download-adios-shared=<bool>
       Install ADIOS with shared libraries  current: 0
  --download-adios-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of ADIOS  current: 0
ZLIB:
  --with-zlib=<bool>
       Indicate if you wish to test for zlib  current: 0
  --with-zlib-dir=<dir>
       Indicate the root directory of the zlib installation
  --with-zlib-pkg-config=<dir>
       Look for zlib using pkg-config utility optional directory to look in
  --with-zlib-include=<dirs>
       Indicate the directory of the zlib include files
  --with-zlib-lib=<libraries: e.g. [/Users/..../libzlib.a,...]>
       Indicate the zlib libraries
  --download-zlib=<no,yes,filename,url>
       Download and install zlib  current: no
  --download-zlib-commit=commitid
       The commit id from a git repository to use for the build of zlib  current: 0
  --download-zlib-static=<bool>
       Build libz as a static library  current: 0
HDF5:
  --with-hdf5=<bool>
       Indicate if you wish to test for hdf5  current: 0
  --with-hdf5-dir=<dir>
       Indicate the root directory of the hdf5 installation
  --with-hdf5-pkg-config=<dir>
       Look for hdf5 using pkg-config utility optional directory to look in
  --with-hdf5-include=<dirs>
       Indicate the directory of the hdf5 include files
  --with-hdf5-lib=<libraries: e.g. [/Users/..../libhdf5.a,...]>
       Indicate the hdf5 libraries
  --download-hdf5=<no,yes,filename,url>
       Download and install hdf5  current: no
  --download-hdf5-commit=commitid
       The commit id from a git repository to use for the build of hdf5  current: 0
  --download-hdf5-shared=<bool>
       Install HDF5 with shared libraries  current: 0
  --download-hdf5-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of hdf5  current: 0
  --with-hdf5-fortran-bindings
       Use/build HDF5 Fortran interface (PETsc does not need it)  current: 0
  --download-hdf5-shared-libraries
       Build HDF5 shared libraries  current: 1
SZLIB:
  --with-szlib=<bool>
       Indicate if you wish to test for szlib  current: 0
  --with-szlib-dir=<dir>
       Indicate the root directory of the szlib installation
  --with-szlib-pkg-config=<dir>
       Look for szlib using pkg-config utility optional directory to look in
  --with-szlib-include=<dirs>
       Indicate the directory of the szlib include files
  --with-szlib-lib=<libraries: e.g. [/Users/..../libszlib.a,...]>
       Indicate the szlib libraries
  --download-szlib=<no,yes,filename,url>
       Download and install szlib  current: no
  --download-szlib-commit=commitid
       The commit id from a git repository to use for the build of szlib  current: 0
  --download-szlib-shared=<bool>
       Install SZLIB with shared libraries  current: 0
  --download-szlib-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of szlib  current: 0
NETCDF:
  --with-netcdf=<bool>
       Indicate if you wish to test for netcdf  current: 0
  --with-netcdf-dir=<dir>
       Indicate the root directory of the netcdf installation
  --with-netcdf-pkg-config=<dir>
       Look for netcdf using pkg-config utility optional directory to look in
  --with-netcdf-include=<dirs>
       Indicate the directory of the netcdf include files
  --with-netcdf-lib=<libraries: e.g. [/Users/..../libnetcdf.a,...]>
       Indicate the netcdf libraries
  --download-netcdf=<no,yes,filename,url>
       Download and install netcdf  current: no
  --download-netcdf-commit=commitid
       The commit id from a git repository to use for the build of netcdf  current: 0
  --download-netcdf-shared=<bool>
       Install NETCDF with shared libraries  current: 0
  --download-netcdf-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of netcdf  current: 0
PNETCDF:
  --with-pnetcdf=<bool>
       Indicate if you wish to test for pnetcdf  current: 0
  --with-pnetcdf-dir=<dir>
       Indicate the root directory of the pnetcdf installation
  --with-pnetcdf-pkg-config=<dir>
       Look for pnetcdf using pkg-config utility optional directory to look in
  --with-pnetcdf-include=<dirs>
       Indicate the directory of the pnetcdf include files
  --with-pnetcdf-lib=<libraries: e.g. [/Users/..../libpnetcdf.a,...]>
       Indicate the pnetcdf libraries
  --download-pnetcdf=<no,yes,filename,url>
       Download and install pnetcdf  current: no
  --download-pnetcdf-commit=commitid
       The commit id from a git repository to use for the build of pnetcdf  current: 0
  --download-pnetcdf-shared=<bool>
       Install PNETCDF with shared libraries  current: 0
  --download-pnetcdf-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of pnetcdf  current: 0
ADOLC:
  --with-adolc=<bool>
       Indicate if you wish to test for ADOLC  current: 0
  --with-adolc-dir=<dir>
       Indicate the root directory of the ADOLC installation
  --with-adolc-pkg-config=<dir>
       Look for ADOLC using pkg-config utility optional directory to look in
  --with-adolc-include=<dirs>
       Indicate the directory of the ADOLC include files
  --with-adolc-lib=<libraries: e.g. [/Users/..../libadolc.a,...]>
       Indicate the ADOLC libraries
  --download-adolc=<no,yes,filename,url>
       Download and install ADOLC  current: no
  --download-adolc-commit=commitid
       The commit id from a git repository to use for the build of ADOLC  current: 0
  --download-adolc-shared=<bool>
       Install ADOLC with shared libraries  current: 0
  --download-adolc-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of ADOLC  current: 0
COLPACK:
  --with-colpack=<bool>
       Indicate if you wish to test for ColPack  current: 0
  --with-colpack-dir=<dir>
       Indicate the root directory of the ColPack installation
  --with-colpack-pkg-config=<dir>
       Look for ColPack using pkg-config utility optional directory to look in
  --with-colpack-include=<dirs>
       Indicate the directory of the ColPack include files
  --with-colpack-lib=<libraries: e.g. [/Users/..../libcolpack.a,...]>
       Indicate the ColPack libraries
  --download-colpack=<no,yes,filename,url>
       Download and install ColPack  current: no
  --download-colpack-commit=commitid
       The commit id from a git repository to use for the build of ColPack  current: 0
  --download-colpack-shared=<bool>
       Install COLPACK with shared libraries  current: 0
  --download-colpack-cmake-arguments=string
       Additional CMake arguments for the build of ColPack  current: 0
CMAKE:
  --with-cmake=<bool>
       Indicate if you wish to test for cmake  current: 1
  --with-cmake-dir=<dir>
       Indicate the root directory of the cmake installation
  --with-cmake-pkg-config=<dir>
       Look for cmake using pkg-config utility optional directory to look in
  --with-cmake-include=<dirs>
       Indicate the directory of the cmake include files
  --with-cmake-lib=<libraries: e.g. [/Users/..../libcmake.a,...]>
       Indicate the cmake libraries
  --download-cmake=<no,yes,filename,url>
       Download and install cmake  current: no
  --download-cmake-commit=commitid
       The commit id from a git repository to use for the build of cmake  current: 0
  --download-cmake-shared=<bool>
       Install CMAKE with shared libraries  current: 0
  --download-cmake-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of cmake  current: 0
  --download-cmake-cc=<prog>
       C compiler for Cmake configure
  --download-cmake-cxx=<prog>
       C++ compiler for Cmake configure
  --with-cmake-exec=<executable>
       CMake executable to look for
  --with-ctest-exec=<executable>
       Ctest executable to look for
AMREX:
  --with-amrex=<bool>
       Indicate if you wish to test for AMReX  current: 0
  --with-amrex-dir=<dir>
       Indicate the root directory of the AMReX installation
  --with-amrex-pkg-config=<dir>
       Look for AMReX using pkg-config utility optional directory to look in
  --with-amrex-include=<dirs>
       Indicate the directory of the AMReX include files
  --with-amrex-lib=<libraries: e.g. [/Users/..../libamrex.a,...]>
       Indicate the AMReX libraries
  --download-amrex=<no,yes,filename,url>
       Download and install AMReX  current: no
  --download-amrex-commit=commitid
       The commit id from a git repository to use for the build of AMReX  current: 0
  --download-amrex-shared=<bool>
       Install AMREX with shared libraries  current: 0
  --download-amrex-cmake-arguments=string
       Additional CMake arguments for the build of AMReX  current: 0
HYPRE:
  --with-hypre=<bool>
       Indicate if you wish to test for hypre  current: 0
  --with-hypre-dir=<dir>
       Indicate the root directory of the hypre installation
  --with-hypre-pkg-config=<dir>
       Look for hypre using pkg-config utility optional directory to look in
  --with-hypre-include=<dirs>
       Indicate the directory of the hypre include files
  --with-hypre-lib=<libraries: e.g. [/Users/..../libhypre.a,...]>
       Indicate the hypre libraries
  --download-hypre=<no,yes,filename,url>
       Download and install hypre  current: no
  --download-hypre-commit=commitid
       The commit id from a git repository to use for the build of hypre  current: 0
  --download-hypre-shared=<bool>
       Install HYPRE with shared libraries  current: 0
  --download-hypre-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of hypre  current: 0
  --with-hypre-gpu-arch=<string>
       Value passed to hypre's --with-gpu-arch= configure option  current: 0
CHACO:
  --with-chaco=<bool>
       Indicate if you wish to test for Chaco  current: 0
  --with-chaco-dir=<dir>
       Indicate the root directory of the Chaco installation
  --with-chaco-pkg-config=<dir>
       Look for Chaco using pkg-config utility optional directory to look in
  --with-chaco-include=<dirs>
       Indicate the directory of the Chaco include files
  --with-chaco-lib=<libraries: e.g. [/Users/..../libchaco.a,...]>
       Indicate the Chaco libraries
  --download-chaco=<no,yes,filename,url>
       Download and install Chaco  current: no
  --download-chaco-commit=commitid
       The commit id from a git repository to use for the build of Chaco  current: 0
CHOMBO:
  --with-chombo=<bool>
       Indicate if you wish to test for Chombo  current: 0
  --with-chombo-dir=<dir>
       Indicate the root directory of the Chombo installation
  --with-chombo-pkg-config=<dir>
       Look for Chombo using pkg-config utility optional directory to look in
  --with-chombo-include=<dirs>
       Indicate the directory of the Chombo include files
  --with-chombo-lib=<libraries: e.g. [/Users/..../libchombo.a,...]>
       Indicate the Chombo libraries
  --download-chombo=<no,yes,filename,url>
       Download and install Chombo  current: no
  --download-chombo-commit=commitid
       The commit id from a git repository to use for the build of Chombo  current: 0
  --download-chombo-dimension=<1,2,3>
       Install Chombo to work in this space dimension  current: 2
CODIPACK:
  --with-codipack=<bool>
       Indicate if you wish to test for CoDiPack  current: 0
  --with-codipack-dir=<dir>
       Indicate the root directory of the CoDiPack installation
  --with-codipack-pkg-config=<dir>
       Look for CoDiPack using pkg-config utility optional directory to look in
  --with-codipack-include=<dirs>
       Indicate the directory of the CoDiPack include files
  --with-codipack-lib=<libraries: e.g. [/Users/..../libcodipack.a,...]>
       Indicate the CoDiPack libraries
  --download-codipack=<no,yes,filename,url>
       Download and install CoDiPack  current: no
  --download-codipack-commit=commitid
       The commit id from a git repository to use for the build of CoDiPack  current: 0
GLVIS:
  --with-glvis=<bool>
       Indicate if you wish to test for GLVis  current: 0
  --with-glvis-dir=<dir>
       Indicate the root directory of the GLVis installation
  --with-glvis-pkg-config=<dir>
       Look for GLVis using pkg-config utility optional directory to look in
  --with-glvis-include=<dirs>
       Indicate the directory of the GLVis include files
  --with-glvis-lib=<libraries: e.g. [/Users/..../libglvis.a,...]>
       Indicate the GLVis libraries
  --download-glvis=<no,yes,filename,url>
       Download and install GLVis  current: no
  --download-glvis-commit=commitid
       The commit id from a git repository to use for the build of GLVis  current: 0
  --download-glvis-shared=<bool>
       Install GLVIS with shared libraries  current: 0
  --download-glvis-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of GLVis  current: 0
OPENGL:
  --with-opengl=<bool>
       Indicate if you wish to test for opengl  current: 0
  --with-opengl-dir=<dir>
       Indicate the root directory of the opengl installation
  --with-opengl-pkg-config=<dir>
       Look for opengl using pkg-config utility optional directory to look in
  --with-opengl-include=<dirs>
       Indicate the directory of the opengl include files
  --with-opengl-lib=<libraries: e.g. [/Users/..../libopengl.a,...]>
       Indicate the opengl libraries
KS:
  --with-ks=<bool>
       Indicate if you wish to test for KS  current: 0
  --with-ks-dir=<dir>
       Indicate the root directory of the KS installation
  --with-ks-pkg-config=<dir>
       Look for KS using pkg-config utility optional directory to look in
  --with-ks-include=<dirs>
       Indicate the directory of the KS include files
  --with-ks-lib=<libraries: e.g. [/Users/..../libks.a,...]>
       Indicate the KS libraries
  --download-ks=<no,yes,filename,url>
       Download and install KS  current: no
  --download-ks-commit=commitid
       The commit id from a git repository to use for the build of KS  current: 0
MFEM:
  --download-mfem=<no,yes,filename,url>
       Download and install MFEM  current: no
  --download-mfem-commit=commitid
       The commit id from a git repository to use for the build of MFEM  current: 0
  --download-mfem-ghv-cxx=<prog>
       CXX Front-end compiler to compile get_hypre_version
METIS:
  --with-metis=<bool>
       Indicate if you wish to test for metis  current: 0
  --with-metis-dir=<dir>
       Indicate the root directory of the metis installation
  --with-metis-pkg-config=<dir>
       Look for metis using pkg-config utility optional directory to look in
  --with-metis-include=<dirs>
       Indicate the directory of the metis include files
  --with-metis-lib=<libraries: e.g. [/Users/..../libmetis.a,...]>
       Indicate the metis libraries
  --download-metis=<no,yes,filename,url>
       Download and install metis  current: no
  --download-metis-commit=commitid
       The commit id from a git repository to use for the build of metis  current: 0
  --download-metis-shared=<bool>
       Install METIS with shared libraries  current: 0
  --download-metis-cmake-arguments=string
       Additional CMake arguments for the build of metis  current: 0
  --download-metis-use-doubleprecision=<bool>
       enable METIS_USE_DOUBLEPRECISION  current: 0
SLEPC:
  --download-slepc=<no,yes,filename,url>
       Download and install slepc  current: no
  --download-slepc-commit=commitid
       The commit id from a git repository to use for the build of slepc  current: 0
  --download-slepc-configure-arguments=string
       Additional configure arguments for the build of SLEPc
SUITESPARSE:
  --with-suitesparse=<bool>
       Indicate if you wish to test for SuiteSparse  current: 0
  --with-suitesparse-dir=<dir>
       Indicate the root directory of the SuiteSparse installation
  --with-suitesparse-pkg-config=<dir>
       Look for SuiteSparse using pkg-config utility optional directory to look in
  --with-suitesparse-include=<dirs>
       Indicate the directory of the SuiteSparse include files
  --with-suitesparse-lib=<libraries: e.g. [/Users/..../libsuitesparse.a,...]>
       Indicate the SuiteSparse libraries
  --download-suitesparse=<no,yes,filename,url>
       Download and install SuiteSparse  current: no
  --download-suitesparse-commit=commitid
       The commit id from a git repository to use for the build of SuiteSparse  current: 0
  --download-suitesparse-disablegpu=<bool>
       Force disabling SuiteSparse/CHOLMOD use of GPUs  current: 1
LIBCEED:
  --with-libceed=<bool>
       Indicate if you wish to test for libceed  current: 0
  --with-libceed-dir=<dir>
       Indicate the root directory of the libceed installation
  --with-libceed-pkg-config=<dir>
       Look for libceed using pkg-config utility optional directory to look in
  --with-libceed-include=<dirs>
       Indicate the directory of the libceed include files
  --with-libceed-lib=<libraries: e.g. [/Users/..../liblibceed.a,...]>
       Indicate the libceed libraries
  --download-libceed=<no,yes,filename,url>
       Download and install libceed  current: no
  --download-libceed-commit=commitid
       The commit id from a git repository to use for the build of libceed  current: 0
MOAB:
  --with-moab=<bool>
       Indicate if you wish to test for MOAB  current: 0
  --with-moab-dir=<dir>
       Indicate the root directory of the MOAB installation
  --with-moab-pkg-config=<dir>
       Look for MOAB using pkg-config utility optional directory to look in
  --with-moab-include=<dirs>
       Indicate the directory of the MOAB include files
  --with-moab-lib=<libraries: e.g. [/Users/..../libmoab.a,...]>
       Indicate the MOAB libraries
  --download-moab=<no,yes,filename,url>
       Download and install MOAB  current: no
  --download-moab-commit=commitid
       The commit id from a git repository to use for the build of MOAB  current: 0
  --download-moab-shared=<bool>
       Install MOAB with shared libraries  current: 0
  --download-moab-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of MOAB  current: 0
  --download-moab-fc
       Build MOAB Fortran interface  current: 1
EIGEN:
  --with-eigen=<bool>
       Indicate if you wish to test for eigen  current: 0
  --with-eigen-dir=<dir>
       Indicate the root directory of the eigen installation
  --with-eigen-pkg-config=<dir>
       Look for eigen using pkg-config utility optional directory to look in
  --with-eigen-include=<dirs>
       Indicate the directory of the eigen include files
  --with-eigen-lib=<libraries: e.g. [/Users/..../libeigen.a,...]>
       Indicate the eigen libraries
  --download-eigen=<no,yes,filename,url>
       Download and install eigen  current: no
  --download-eigen-commit=commitid
       The commit id from a git repository to use for the build of eigen  current: 0
  --download-eigen-shared=<bool>
       Install EIGEN with shared libraries  current: 0
  --download-eigen-cmake-arguments=string
       Additional CMake arguments for the build of eigen  current: 0
PARMETIS:
  --with-parmetis=<bool>
       Indicate if you wish to test for parmetis  current: 0
  --with-parmetis-dir=<dir>
       Indicate the root directory of the parmetis installation
  --with-parmetis-pkg-config=<dir>
       Look for parmetis using pkg-config utility optional directory to look in
  --with-parmetis-include=<dirs>
       Indicate the directory of the parmetis include files
  --with-parmetis-lib=<libraries: e.g. [/Users/..../libparmetis.a,...]>
       Indicate the parmetis libraries
  --download-parmetis=<no,yes,filename,url>
       Download and install parmetis  current: no
  --download-parmetis-commit=commitid
       The commit id from a git repository to use for the build of parmetis  current: 0
  --download-parmetis-shared=<bool>
       Install PARMETIS with shared libraries  current: 0
  --download-parmetis-cmake-arguments=string
       Additional CMake arguments for the build of parmetis  current: 0
PTSCOTCH:
  --with-ptscotch=<bool>
       Indicate if you wish to test for PTScotch  current: 0
  --with-ptscotch-dir=<dir>
       Indicate the root directory of the PTScotch installation
  --with-ptscotch-pkg-config=<dir>
       Look for PTScotch using pkg-config utility optional directory to look in
  --with-ptscotch-include=<dirs>
       Indicate the directory of the PTScotch include files
  --with-ptscotch-lib=<libraries: e.g. [/Users/..../libptscotch.a,...]>
       Indicate the PTScotch libraries
  --download-ptscotch=<no,yes,filename,url>
       Download and install PTScotch  current: no
  --download-ptscotch-commit=commitid
       The commit id from a git repository to use for the build of PTScotch  current: 0
REGEX:
  --with-regex=<bool>
       Indicate if you wish to test for regex  current: 1
  --with-regex-dir=<dir>
       Indicate the root directory of the regex installation
  --with-regex-pkg-config=<dir>
       Look for regex using pkg-config utility optional directory to look in
  --with-regex-include=<dirs>
       Indicate the directory of the regex include files
  --with-regex-lib=<libraries: e.g. [/Users/..../libregex.a,...]>
       Indicate the regex libraries
ZOLTAN:
  --with-zoltan=<bool>
       Indicate if you wish to test for Zoltan  current: 0
  --with-zoltan-dir=<dir>
       Indicate the root directory of the Zoltan installation
  --with-zoltan-pkg-config=<dir>
       Look for Zoltan using pkg-config utility optional directory to look in
  --with-zoltan-include=<dirs>
       Indicate the directory of the Zoltan include files
  --with-zoltan-lib=<libraries: e.g. [/Users/..../libzoltan.a,...]>
       Indicate the Zoltan libraries
  --download-zoltan=<no,yes,filename,url>
       Download and install Zoltan  current: no
  --download-zoltan-commit=commitid
       The commit id from a git repository to use for the build of Zoltan  current: 0
  --download-zoltan-shared=<bool>
       Install ZOLTAN with shared libraries  current: 0
  --download-zoltan-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of Zoltan  current: 0
MUMPS:
  --with-mumps=<bool>
       Indicate if you wish to test for MUMPS  current: 0
  --with-mumps-dir=<dir>
       Indicate the root directory of the MUMPS installation
  --with-mumps-pkg-config=<dir>
       Look for MUMPS using pkg-config utility optional directory to look in
  --with-mumps-include=<dirs>
       Indicate the directory of the MUMPS include files
  --with-mumps-lib=<libraries: e.g. [/Users/..../libmumps.a,...]>
       Indicate the MUMPS libraries
  --download-mumps=<no,yes,filename,url>
       Download and install MUMPS  current: no
  --download-mumps-commit=commitid
       The commit id from a git repository to use for the build of MUMPS  current: 0
  --with-mumps-serial
       Use serial build of MUMPS  current: 0
SCALAPACK:
  --with-scalapack=<bool>
       Indicate if you wish to test for scalapack  current: 0
  --with-scalapack-dir=<dir>
       Indicate the root directory of the scalapack installation
  --with-scalapack-pkg-config=<dir>
       Look for scalapack using pkg-config utility optional directory to look in
  --with-scalapack-include=<dirs>
       Indicate the directory of the scalapack include files
  --with-scalapack-lib=<libraries: e.g. [/Users/..../libscalapack.a,...]>
       Indicate the scalapack libraries
  --download-scalapack=<no,yes,filename,url>
       Download and install scalapack  current: no
  --download-scalapack-commit=commitid
       The commit id from a git repository to use for the build of scalapack  current: 0
  --download-scalapack-shared=<bool>
       Install SCALAPACK with shared libraries  current: 0
  --download-scalapack-cmake-arguments=string
       Additional CMake arguments for the build of scalapack  current: 0
MATHEMATICA:
  --with-mathematica=<bool>
       Indicate if you wish to test for Mathematica  current: 0
  --with-mathematica-dir=<dir>
       Indicate the root directory of the Mathematica installation
  --with-mathematica-pkg-config=<dir>
       Look for Mathematica using pkg-config utility optional directory to look in
  --with-mathematica-include=<dirs>
       Indicate the directory of the Mathematica include files
  --with-mathematica-lib=<libraries: e.g. [/Users/..../libmathematica.a,...]>
       Indicate the Mathematica libraries
MATLAB:
  --with-matlab=<bool>
       Activate Matlab  current: 0
  --with-matlab-socket=<bool>
       Build socket code for Matlab  current: 1
  --with-matlab-dir=<root dir>
       Specify the root directory of the Matlab installation
  --with-matlab-arch=<string>
       Use Matlab Architecture (default use first-found)
MATLAB_ENGINE:
  --with-matlab-engine=<bool>
       Indicate if you wish to test for MatlabEngine  current: 0
  --with-matlab-engine-dir=<dir>
       Indicate the root directory of the MatlabEngine installation
  --with-matlab-engine-pkg-config=<dir>
       Look for MatlabEngine using pkg-config utility optional directory to look in
  --with-matlab-engine-include=<dirs>
       Indicate the directory of the MatlabEngine include files
  --with-matlab-engine-lib=<libraries: e.g. [/Users/..../libmatlab-engine.a,...]>
       Indicate the MatlabEngine libraries
NVSHMEM:
  --with-nvshmem=<bool>
       Indicate if you wish to test for NVSHMEM  current: 0
  --with-nvshmem-dir=<dir>
       Indicate the root directory of the NVSHMEM installation
  --with-nvshmem-pkg-config=<dir>
       Look for NVSHMEM using pkg-config utility optional directory to look in
  --with-nvshmem-include=<dirs>
       Indicate the directory of the NVSHMEM include files
  --with-nvshmem-lib=<libraries: e.g. [/Users/..../libnvshmem.a,...]>
       Indicate the NVSHMEM libraries
PARTY:
  --with-party=<bool>
       Indicate if you wish to test for PARTY  current: 0
  --with-party-dir=<dir>
       Indicate the root directory of the PARTY installation
  --with-party-pkg-config=<dir>
       Look for PARTY using pkg-config utility optional directory to look in
  --with-party-include=<dirs>
       Indicate the directory of the PARTY include files
  --with-party-lib=<libraries: e.g. [/Users/..../libparty.a,...]>
       Indicate the PARTY libraries
  --download-party=<no,yes,filename,url>
       Download and install PARTY  current: no
  --download-party-commit=commitid
       The commit id from a git repository to use for the build of PARTY  current: 0
PASTIX:
  --with-pastix=<bool>
       Indicate if you wish to test for PaStiX  current: 0
  --with-pastix-dir=<dir>
       Indicate the root directory of the PaStiX installation
  --with-pastix-pkg-config=<dir>
       Look for PaStiX using pkg-config utility optional directory to look in
  --with-pastix-include=<dirs>
       Indicate the directory of the PaStiX include files
  --with-pastix-lib=<libraries: e.g. [/Users/..../libpastix.a,...]>
       Indicate the PaStiX libraries
  --download-pastix=<no,yes,filename,url>
       Download and install PaStiX  current: no
  --download-pastix-commit=commitid
       The commit id from a git repository to use for the build of PaStiX  current: 0
RANDOM123:
  --with-random123=<bool>
       Indicate if you wish to test for Random123  current: 0
  --with-random123-dir=<dir>
       Indicate the root directory of the Random123 installation
  --with-random123-pkg-config=<dir>
       Look for Random123 using pkg-config utility optional directory to look in
  --with-random123-include=<dirs>
       Indicate the directory of the Random123 include files
  --with-random123-lib=<libraries: e.g. [/Users/..../librandom123.a,...]>
       Indicate the Random123 libraries
  --download-random123=<no,yes,filename,url>
       Download and install Random123  current: no
  --download-random123-commit=commitid
       The commit id from a git repository to use for the build of Random123  current: 0
SAMRAI:
  --with-samrai=<bool>
       Indicate if you wish to test for SAMRAI  current: 0
  --with-samrai-dir=<dir>
       Indicate the root directory of the SAMRAI installation
  --with-samrai-pkg-config=<dir>
       Look for SAMRAI using pkg-config utility optional directory to look in
  --with-samrai-include=<dirs>
       Indicate the directory of the SAMRAI include files
  --with-samrai-lib=<libraries: e.g. [/Users/..../libsamrai.a,...]>
       Indicate the SAMRAI libraries
  --download-samrai=<no,yes,filename,url>
       Download and install SAMRAI  current: no
  --download-samrai-commit=commitid
       The commit id from a git repository to use for the build of SAMRAI  current: 0
  --download-samrai-shared=<bool>
       Install SAMRAI with shared libraries  current: 0
  --download-samrai-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of SAMRAI  current: 0
SILO:
  --with-silo=<bool>
       Indicate if you wish to test for silo  current: 0
  --with-silo-dir=<dir>
       Indicate the root directory of the silo installation
  --with-silo-pkg-config=<dir>
       Look for silo using pkg-config utility optional directory to look in
  --with-silo-include=<dirs>
       Indicate the directory of the silo include files
  --with-silo-lib=<libraries: e.g. [/Users/..../libsilo.a,...]>
       Indicate the silo libraries
  --download-silo=<no,yes,filename,url>
       Download and install silo  current: no
  --download-silo-commit=commitid
       The commit id from a git repository to use for the build of silo  current: 0
  --download-silo-shared=<bool>
       Install SILO with shared libraries  current: 0
  --download-silo-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of silo  current: 0
SUPERLU:
  --with-superlu=<bool>
       Indicate if you wish to test for SuperLU  current: 0
  --with-superlu-dir=<dir>
       Indicate the root directory of the SuperLU installation
  --with-superlu-pkg-config=<dir>
       Look for SuperLU using pkg-config utility optional directory to look in
  --with-superlu-include=<dirs>
       Indicate the directory of the SuperLU include files
  --with-superlu-lib=<libraries: e.g. [/Users/..../libsuperlu.a,...]>
       Indicate the SuperLU libraries
  --download-superlu=<no,yes,filename,url>
       Download and install SuperLU  current: no
  --download-superlu-commit=commitid
       The commit id from a git repository to use for the build of SuperLU  current: 0
  --download-superlu-shared=<bool>
       Install SUPERLU with shared libraries  current: 0
  --download-superlu-cmake-arguments=string
       Additional CMake arguments for the build of SuperLU  current: 0
SUPERLU_DIST:
  --with-superlu_dist=<bool>
       Indicate if you wish to test for SuperLU_DIST  current: 0
  --with-superlu_dist-dir=<dir>
       Indicate the root directory of the SuperLU_DIST installation
  --with-superlu_dist-pkg-config=<dir>
       Look for SuperLU_DIST using pkg-config utility optional directory to look in
  --with-superlu_dist-include=<dirs>
       Indicate the directory of the SuperLU_DIST include files
  --with-superlu_dist-lib=<libraries: e.g. [/Users/..../libsuperlu_dist.a,...]>
       Indicate the SuperLU_DIST libraries
  --download-superlu_dist=<no,yes,filename,url>
       Download and install SuperLU_DIST  current: no
  --download-superlu_dist-commit=commitid
       The commit id from a git repository to use for the build of SuperLU_DIST  current: 0
  --download-superlu_dist-shared=<bool>
       Install SUPERLU_DIST with shared libraries  current: 0
  --download-superlu_dist-cmake-arguments=string
       Additional CMake arguments for the build of SuperLU_DIST  current: 0
TRIANGLE:
  --with-triangle=<bool>
       Indicate if you wish to test for Triangle  current: 0
  --with-triangle-dir=<dir>
       Indicate the root directory of the Triangle installation
  --with-triangle-pkg-config=<dir>
       Look for Triangle using pkg-config utility optional directory to look in
  --with-triangle-include=<dirs>
       Indicate the directory of the Triangle include files
  --with-triangle-lib=<libraries: e.g. [/Users/..../libtriangle.a,...]>
       Indicate the Triangle libraries
  --download-triangle=<no,yes,filename,url>
       Download and install Triangle  current: no
  --download-triangle-commit=commitid
       The commit id from a git repository to use for the build of Triangle  current: 0
TRILINOS:
  --with-trilinos=<bool>
       Indicate if you wish to test for Trilinos  current: 0
  --with-trilinos-dir=<dir>
       Indicate the root directory of the Trilinos installation
  --with-trilinos-pkg-config=<dir>
       Look for Trilinos using pkg-config utility optional directory to look in
  --with-trilinos-include=<dirs>
       Indicate the directory of the Trilinos include files
  --with-trilinos-lib=<libraries: e.g. [/Users/..../libtrilinos.a,...]>
       Indicate the Trilinos libraries
  --download-trilinos=<no,yes,filename,url>
       Download and install Trilinos  current: no
  --download-trilinos-commit=commitid
       The commit id from a git repository to use for the build of Trilinos  current: 0
  --download-trilinos-shared=<bool>
       Install TRILINOS with shared libraries  current: 0
  --download-trilinos-cmake-arguments=string
       Additional CMake arguments for the build of Trilinos  current: 0
MKL_PARDISO:
  --with-mkl_pardiso=<bool>
       Indicate if you wish to test for mkl_pardiso  current: 0
  --with-mkl_pardiso-dir=<dir>
       Indicate the root directory of the mkl_pardiso installation
  --with-mkl_pardiso-pkg-config=<dir>
       Look for mkl_pardiso using pkg-config utility optional directory to look in
  --with-mkl_pardiso-include=<dirs>
       Indicate the directory of the mkl_pardiso include files
  --with-mkl_pardiso-lib=<libraries: e.g. [/Users/..../libmkl_pardiso.a,...]>
       Indicate the mkl_pardiso libraries
ML:
  --with-ml=<bool>
       Indicate if you wish to test for ml  current: 0
  --with-ml-dir=<dir>
       Indicate the root directory of the ml installation
  --with-ml-pkg-config=<dir>
       Look for ml using pkg-config utility optional directory to look in
  --with-ml-include=<dirs>
       Indicate the directory of the ml include files
  --with-ml-lib=<libraries: e.g. [/Users/..../libml.a,...]>
       Indicate the ml libraries
  --download-ml=<no,yes,filename,url>
       Download and install ml  current: no
  --download-ml-commit=commitid
       The commit id from a git repository to use for the build of ml  current: 0
  --download-ml-shared=<bool>
       Install ML with shared libraries  current: 0
  --download-ml-cmake-arguments=string
       Additional CMake arguments for the build of ml  current: 0
EXODUSII:
  --with-exodusii=<bool>
       Indicate if you wish to test for exodusii  current: 0
  --with-exodusii-dir=<dir>
       Indicate the root directory of the exodusii installation
  --with-exodusii-pkg-config=<dir>
       Look for exodusii using pkg-config utility optional directory to look in
  --with-exodusii-include=<dirs>
       Indicate the directory of the exodusii include files
  --with-exodusii-lib=<libraries: e.g. [/Users/..../libexodusii.a,...]>
       Indicate the exodusii libraries
  --download-exodusii=<no,yes,filename,url>
       Download and install exodusii  current: no
  --download-exodusii-commit=commitid
       The commit id from a git repository to use for the build of exodusii  current: 0
  --download-exodusii-shared=<bool>
       Install EXODUSII with shared libraries  current: 0
  --download-exodusii-cmake-arguments=string
       Additional CMake arguments for the build of exodusii  current: 0
BOOST:
  --with-boost=<bool>
       Indicate if you wish to test for boost  current: 0
  --with-boost-dir=<dir>
       Indicate the root directory of the boost installation
  --with-boost-pkg-config=<dir>
       Look for boost using pkg-config utility optional directory to look in
  --with-boost-include=<dirs>
       Indicate the directory of the boost include files
  --with-boost-lib=<libraries: e.g. [/Users/..../libboost.a,...]>
       Indicate the boost libraries
  --download-boost=<no,yes,filename,url>
       Download and install boost  current: no
  --download-boost-commit=commitid
       The commit id from a git repository to use for the build of boost  current: 0
  --boost-headers-only=<bool>
       When true, do not build boost libraries, only install headers  current: 0
ADBLASLAPACK:
  --with-adblaslapack=<bool>
       Indicate if you wish to test for adblaslapack  current: 0
  --with-adblaslapack-dir=<dir>
       Indicate the root directory of the adblaslapack installation
  --with-adblaslapack-pkg-config=<dir>
       Look for adblaslapack using pkg-config utility optional directory to look in
  --with-adblaslapack-include=<dirs>
       Indicate the directory of the adblaslapack include files
  --with-adblaslapack-lib=<libraries: e.g. [/Users/..../libadblaslapack.a,...]>
       Indicate the adblaslapack libraries
  --download-adblaslapack=<no,yes,filename,url>
       Download and install adblaslapack  current: no
  --download-adblaslapack-commit=commitid
       The commit id from a git repository to use for the build of adblaslapack  current: 0
ALQUIMIA:
  --with-alquimia=<bool>
       Indicate if you wish to test for alquimia  current: 0
  --with-alquimia-dir=<dir>
       Indicate the root directory of the alquimia installation
  --with-alquimia-pkg-config=<dir>
       Look for alquimia using pkg-config utility optional directory to look in
  --with-alquimia-include=<dirs>
       Indicate the directory of the alquimia include files
  --with-alquimia-lib=<libraries: e.g. [/Users/..../libalquimia.a,...]>
       Indicate the alquimia libraries
  --download-alquimia=<no,yes,filename,url>
       Download and install alquimia  current: no
  --download-alquimia-commit=commitid
       The commit id from a git repository to use for the build of alquimia  current: 0
  --download-alquimia-shared=<bool>
       Install ALQUIMIA with shared libraries  current: 0
  --download-alquimia-cmake-arguments=string
       Additional CMake arguments for the build of alquimia  current: 0
PFLOTRAN:
  --with-pflotran=<bool>
       Indicate if you wish to test for pflotran  current: 0
  --with-pflotran-dir=<dir>
       Indicate the root directory of the pflotran installation
  --with-pflotran-pkg-config=<dir>
       Look for pflotran using pkg-config utility optional directory to look in
  --with-pflotran-include=<dirs>
       Indicate the directory of the pflotran include files
  --with-pflotran-lib=<libraries: e.g. [/Users/..../libpflotran.a,...]>
       Indicate the pflotran libraries
  --download-pflotran=<no,yes,filename,url>
       Download and install pflotran  current: no
  --download-pflotran-commit=commitid
       The commit id from a git repository to use for the build of pflotran  current: 0
  --download-pflotran-shared=<bool>
       Install PFLOTRAN with shared libraries  current: 0
  --download-pflotran-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of pflotran  current: 0
ASCEM-IO:
  --with-ascem-io=<bool>
       Indicate if you wish to test for ascem-io  current: 0
  --with-ascem-io-dir=<dir>
       Indicate the root directory of the ascem-io installation
  --with-ascem-io-pkg-config=<dir>
       Look for ascem-io using pkg-config utility optional directory to look in
  --with-ascem-io-include=<dirs>
       Indicate the directory of the ascem-io include files
  --with-ascem-io-lib=<libraries: e.g. [/Users/..../libascem-io.a,...]>
       Indicate the ascem-io libraries
  --download-ascem-io=<no,yes,filename,url>
       Download and install ascem-io  current: no
  --download-ascem-io-commit=commitid
       The commit id from a git repository to use for the build of ascem-io  current: 0
BAMG:
  --with-bamg=<bool>
       Indicate if you wish to test for bamg  current: 0
  --with-bamg-dir=<dir>
       Indicate the root directory of the bamg installation
  --with-bamg-pkg-config=<dir>
       Look for bamg using pkg-config utility optional directory to look in
  --with-bamg-include=<dirs>
       Indicate the directory of the bamg include files
  --with-bamg-lib=<libraries: e.g. [/Users/..../libbamg.a,...]>
       Indicate the bamg libraries
  --download-bamg=<no,yes,filename,url>
       Download and install bamg  current: no
  --download-bamg-commit=commitid
       The commit id from a git repository to use for the build of bamg  current: 0
C2HTML:
  --with-c2html=<bool>
       Indicate if you wish to test for c2html  current: 1
  --with-c2html-dir=<dir>
       Indicate the root directory of the c2html installation
  --with-c2html-pkg-config=<dir>
       Look for c2html using pkg-config utility optional directory to look in
  --with-c2html-include=<dirs>
       Indicate the directory of the c2html include files
  --with-c2html-lib=<libraries: e.g. [/Users/..../libc2html.a,...]>
       Indicate the c2html libraries
  --download-c2html=<no,yes,filename,url>
       Download and install c2html  current: no
  --download-c2html-commit=commitid
       The commit id from a git repository to use for the build of c2html  current: 0
  --download-c2html-shared=<bool>
       Install C2HTML with shared libraries  current: 0
  --download-c2html-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of c2html  current: 0
  --download-c2html-cc=<prog>
       C compiler for c2html
  --with-c2html-exec=<executable>
       c2html executable to look for
CAMS:
  --with-cams=<bool>
       Indicate if you wish to test for cams  current: 0
  --with-cams-dir=<dir>
       Indicate the root directory of the cams installation
  --with-cams-pkg-config=<dir>
       Look for cams using pkg-config utility optional directory to look in
  --with-cams-include=<dirs>
       Indicate the directory of the cams include files
  --with-cams-lib=<libraries: e.g. [/Users/..../libcams.a,...]>
       Indicate the cams libraries
  --download-cams=<no,yes,filename,url>
       Download and install cams  current: no
  --download-cams-commit=commitid
       The commit id from a git repository to use for the build of cams  current: 0
CGNS:
  --with-cgns=<bool>
       Indicate if you wish to test for cgns  current: 0
  --with-cgns-dir=<dir>
       Indicate the root directory of the cgns installation
  --with-cgns-pkg-config=<dir>
       Look for cgns using pkg-config utility optional directory to look in
  --with-cgns-include=<dirs>
       Indicate the directory of the cgns include files
  --with-cgns-lib=<libraries: e.g. [/Users/..../libcgns.a,...]>
       Indicate the cgns libraries
COMBBLAS:
  --with-combblas=<bool>
       Indicate if you wish to test for combblas  current: 0
  --with-combblas-dir=<dir>
       Indicate the root directory of the combblas installation
  --with-combblas-pkg-config=<dir>
       Look for combblas using pkg-config utility optional directory to look in
  --with-combblas-include=<dirs>
       Indicate the directory of the combblas include files
  --with-combblas-lib=<libraries: e.g. [/Users/..../libcombblas.a,...]>
       Indicate the combblas libraries
  --download-combblas=<no,yes,filename,url>
       Download and install combblas  current: no
  --download-combblas-commit=commitid
       The commit id from a git repository to use for the build of combblas  current: 0
  --download-combblas-shared=<bool>
       Install COMBBLAS with shared libraries  current: 0
  --download-combblas-cmake-arguments=string
       Additional CMake arguments for the build of combblas  current: 0
CONCURRENCYKIT:
  --with-concurrencykit=<bool>
       Indicate if you wish to test for concurrencykit  current: 0
  --with-concurrencykit-dir=<dir>
       Indicate the root directory of the concurrencykit installation
  --with-concurrencykit-pkg-config=<dir>
       Look for concurrencykit using pkg-config utility optional directory to look in
  --with-concurrencykit-include=<dirs>
       Indicate the directory of the concurrencykit include files
  --with-concurrencykit-lib=<libraries: e.g. [/Users/..../libconcurrencykit.a,...]>
       Indicate the concurrencykit libraries
  --download-concurrencykit=<no,yes,filename,url>
       Download and install concurrencykit  current: no
  --download-concurrencykit-commit=commitid
       The commit id from a git repository to use for the build of concurrencykit  current: 0
  --download-concurrencykit-shared=<bool>
       Install CONCURRENCYKIT with shared libraries  current: 0
  --download-concurrencykit-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of concurrencykit  current: 0
CTETGEN:
  --with-ctetgen=<bool>
       Indicate if you wish to test for ctetgen  current: 0
  --with-ctetgen-dir=<dir>
       Indicate the root directory of the ctetgen installation
  --with-ctetgen-pkg-config=<dir>
       Look for ctetgen using pkg-config utility optional directory to look in
  --with-ctetgen-include=<dirs>
       Indicate the directory of the ctetgen include files
  --with-ctetgen-lib=<libraries: e.g. [/Users/..../libctetgen.a,...]>
       Indicate the ctetgen libraries
  --download-ctetgen=<no,yes,filename,url>
       Download and install ctetgen  current: no
  --download-ctetgen-commit=commitid
       The commit id from a git repository to use for the build of ctetgen  current: 0
  --download-ctetgen-shared=<bool>
       Install CTETGEN with shared libraries  current: 0
  --download-ctetgen-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of ctetgen  current: 0
CUB:
  --with-cub=<bool>
       Indicate if you wish to test for cub  current: 0
  --with-cub-dir=<dir>
       Indicate the root directory of the cub installation
  --with-cub-pkg-config=<dir>
       Look for cub using pkg-config utility optional directory to look in
  --with-cub-include=<dirs>
       Indicate the directory of the cub include files
  --with-cub-lib=<libraries: e.g. [/Users/..../libcub.a,...]>
       Indicate the cub libraries
  --download-cub=<no,yes,filename,url>
       Download and install cub  current: no
  --download-cub-commit=commitid
       The commit id from a git repository to use for the build of cub  current: 0
EGADS:
  --with-egads=<bool>
       Indicate if you wish to test for egads  current: 0
  --with-egads-dir=<dir>
       Indicate the root directory of the egads installation
  --with-egads-pkg-config=<dir>
       Look for egads using pkg-config utility optional directory to look in
  --with-egads-include=<dirs>
       Indicate the directory of the egads include files
  --with-egads-lib=<libraries: e.g. [/Users/..../libegads.a,...]>
       Indicate the egads libraries
  --download-egads=<no,yes,filename,url>
       Download and install egads  current: no
  --download-egads-commit=commitid
       The commit id from a git repository to use for the build of egads  current: 0
  --download-egads-shared=<bool>
       Install EGADS with shared libraries  current: 0
  --download-egads-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of egads  current: 0
  --egads-full
       Install EGADS in addition to EGADSLite  current: 1
OPENCASCADE:
  --with-opencascade=<bool>
       Indicate if you wish to test for opencascade  current: 0
  --with-opencascade-dir=<dir>
       Indicate the root directory of the opencascade installation
  --with-opencascade-pkg-config=<dir>
       Look for opencascade using pkg-config utility optional directory to look in
  --with-opencascade-include=<dirs>
       Indicate the directory of the opencascade include files
  --with-opencascade-lib=<libraries: e.g. [/Users/..../libopencascade.a,...]>
       Indicate the opencascade libraries
  --download-opencascade=<no,yes,filename,url>
       Download and install opencascade  current: no
  --download-opencascade-commit=commitid
       The commit id from a git repository to use for the build of opencascade  current: 0
  --download-opencascade-shared=<bool>
       Install OPENCASCADE with shared libraries  current: 0
  --download-opencascade-cmake-arguments=string
       Additional CMake arguments for the build of opencascade  current: 0
ELEMENTAL:
  --with-elemental=<bool>
       Indicate if you wish to test for elemental  current: 0
  --with-elemental-dir=<dir>
       Indicate the root directory of the elemental installation
  --with-elemental-pkg-config=<dir>
       Look for elemental using pkg-config utility optional directory to look in
  --with-elemental-include=<dirs>
       Indicate the directory of the elemental include files
  --with-elemental-lib=<libraries: e.g. [/Users/..../libelemental.a,...]>
       Indicate the elemental libraries
  --download-elemental=<no,yes,filename,url>
       Download and install elemental  current: no
  --download-elemental-commit=commitid
       The commit id from a git repository to use for the build of elemental  current: 0
  --download-elemental-shared=<bool>
       Install ELEMENTAL with shared libraries  current: 0
  --download-elemental-cmake-arguments=string
       Additional CMake arguments for the build of elemental  current: 0
FFTW:
  --with-fftw=<bool>
       Indicate if you wish to test for fftw  current: 0
  --with-fftw-dir=<dir>
       Indicate the root directory of the fftw installation
  --with-fftw-pkg-config=<dir>
       Look for fftw using pkg-config utility optional directory to look in
  --with-fftw-include=<dirs>
       Indicate the directory of the fftw include files
  --with-fftw-lib=<libraries: e.g. [/Users/..../libfftw.a,...]>
       Indicate the fftw libraries
  --download-fftw=<no,yes,filename,url>
       Download and install fftw  current: no
  --download-fftw-commit=commitid
       The commit id from a git repository to use for the build of fftw  current: 0
  --download-fftw-shared=<bool>
       Install FFTW with shared libraries  current: 0
  --download-fftw-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of fftw  current: 0
GIFLIB:
  --with-giflib=<bool>
       Indicate if you wish to test for giflib  current: 0
  --with-giflib-dir=<dir>
       Indicate the root directory of the giflib installation
  --with-giflib-pkg-config=<dir>
       Look for giflib using pkg-config utility optional directory to look in
  --with-giflib-include=<dirs>
       Indicate the directory of the giflib include files
  --with-giflib-lib=<libraries: e.g. [/Users/..../libgiflib.a,...]>
       Indicate the giflib libraries
  --download-giflib=<no,yes,filename,url>
       Download and install giflib  current: no
  --download-giflib-commit=commitid
       The commit id from a git repository to use for the build of giflib  current: 0
  --download-giflib-shared=<bool>
       Install GIFLIB with shared libraries  current: 0
  --download-giflib-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of giflib  current: 0
GLUT:
  --with-glut=<bool>
       Indicate if you wish to test for glut  current: 0
  --with-glut-dir=<dir>
       Indicate the root directory of the glut installation
  --with-glut-pkg-config=<dir>
       Look for glut using pkg-config utility optional directory to look in
  --with-glut-include=<dirs>
       Indicate the directory of the glut include files
  --with-glut-lib=<libraries: e.g. [/Users/..../libglut.a,...]>
       Indicate the glut libraries
GMP:
  --with-gmp=<bool>
       Indicate if you wish to test for gmp  current: 0
  --with-gmp-dir=<dir>
       Indicate the root directory of the gmp installation
  --with-gmp-pkg-config=<dir>
       Look for gmp using pkg-config utility optional directory to look in
  --with-gmp-include=<dirs>
       Indicate the directory of the gmp include files
  --with-gmp-lib=<libraries: e.g. [/Users/..../libgmp.a,...]>
       Indicate the gmp libraries
  --download-gmp=<no,yes,filename,url>
       Download and install gmp  current: no
  --download-gmp-commit=commitid
       The commit id from a git repository to use for the build of gmp  current: 0
  --download-gmp-shared=<bool>
       Install GMP with shared libraries  current: 0
  --download-gmp-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of gmp  current: 0
GMSH:
  --with-gmsh=<bool>
       Indicate if you wish to test for gmsh  current: 0
  --with-gmsh-dir=<dir>
       Indicate the root directory of the gmsh installation
  --with-gmsh-pkg-config=<dir>
       Look for gmsh using pkg-config utility optional directory to look in
  --with-gmsh-include=<dirs>
       Indicate the directory of the gmsh include files
  --with-gmsh-lib=<libraries: e.g. [/Users/..../libgmsh.a,...]>
       Indicate the gmsh libraries
  --with-gmsh-exec=<executable>
       Gmsh executable to use
GOOGLETEST:
  --with-googletest=<bool>
       Indicate if you wish to test for googletest  current: 0
  --with-googletest-dir=<dir>
       Indicate the root directory of the googletest installation
  --with-googletest-pkg-config=<dir>
       Look for googletest using pkg-config utility optional directory to look in
  --with-googletest-include=<dirs>
       Indicate the directory of the googletest include files
  --with-googletest-lib=<libraries: e.g. [/Users/..../libgoogletest.a,...]>
       Indicate the googletest libraries
  --download-googletest=<no,yes,filename,url>
       Download and install googletest  current: no
  --download-googletest-commit=commitid
       The commit id from a git repository to use for the build of googletest  current: 0
  --download-googletest-shared=<bool>
       Install GOOGLETEST with shared libraries  current: 0
  --download-googletest-cmake-arguments=string
       Additional CMake arguments for the build of googletest  current: 0
GSL:
  --with-gsl=<bool>
       Indicate if you wish to test for gsl  current: 0
  --with-gsl-dir=<dir>
       Indicate the root directory of the gsl installation
  --with-gsl-pkg-config=<dir>
       Look for gsl using pkg-config utility optional directory to look in
  --with-gsl-include=<dirs>
       Indicate the directory of the gsl include files
  --with-gsl-lib=<libraries: e.g. [/Users/..../libgsl.a,...]>
       Indicate the gsl libraries
  --download-gsl=<no,yes,filename,url>
       Download and install gsl  current: no
  --download-gsl-commit=commitid
       The commit id from a git repository to use for the build of gsl  current: 0
  --download-gsl-shared=<bool>
       Install GSL with shared libraries  current: 0
  --download-gsl-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of gsl  current: 0
H2OPUS:
  --download-h2opus=<no,yes,filename,url>
       Download and install h2opus  current: no
  --download-h2opus-commit=commitid
       The commit id from a git repository to use for the build of h2opus  current: 0
MAGMA:
  --with-magma=<bool>
       Indicate if you wish to test for magma  current: 0
  --with-magma-dir=<dir>
       Indicate the root directory of the magma installation
  --with-magma-pkg-config=<dir>
       Look for magma using pkg-config utility optional directory to look in
  --with-magma-include=<dirs>
       Indicate the directory of the magma include files
  --with-magma-lib=<libraries: e.g. [/Users/..../libmagma.a,...]>
       Indicate the magma libraries
  --download-magma=<no,yes,filename,url>
       Download and install magma  current: no
  --download-magma-commit=commitid
       The commit id from a git repository to use for the build of magma  current: 0
  --with-magma-gputarget=<string>
       GPU_TARGET make variable  current: 
  --with-magma-fortran-bindings=<bool>
       Compile MAGMA Fortran bindings  current: 0
KBLAS:
  --with-kblas=<bool>
       Indicate if you wish to test for kblas  current: 0
  --with-kblas-dir=<dir>
       Indicate the root directory of the kblas installation
  --with-kblas-pkg-config=<dir>
       Look for kblas using pkg-config utility optional directory to look in
  --with-kblas-include=<dirs>
       Indicate the directory of the kblas include files
  --with-kblas-lib=<libraries: e.g. [/Users/..../libkblas.a,...]>
       Indicate the kblas libraries
  --download-kblas=<no,yes,filename,url>
       Download and install kblas  current: no
  --download-kblas-commit=commitid
       The commit id from a git repository to use for the build of kblas  current: 0
HCEPHES:
  --with-hcephes=<bool>
       Indicate if you wish to test for hcephes  current: 0
  --with-hcephes-dir=<dir>
       Indicate the root directory of the hcephes installation
  --with-hcephes-pkg-config=<dir>
       Look for hcephes using pkg-config utility optional directory to look in
  --with-hcephes-include=<dirs>
       Indicate the directory of the hcephes include files
  --with-hcephes-lib=<libraries: e.g. [/Users/..../libhcephes.a,...]>
       Indicate the hcephes libraries
  --download-hcephes=<no,yes,filename,url>
       Download and install hcephes  current: no
  --download-hcephes-commit=commitid
       The commit id from a git repository to use for the build of hcephes  current: 0
  --download-hcephes-shared=<bool>
       Install HCEPHES with shared libraries  current: 0
  --download-hcephes-cmake-arguments=string
       Additional CMake arguments for the build of hcephes  current: 0
HPDDM:
  --download-hpddm=<no,yes,filename,url>
       Download and install hpddm  current: no
  --download-hpddm-commit=commitid
       The commit id from a git repository to use for the build of hpddm  current: 0
HTOOL:
  --download-htool=<no,yes,filename,url>
       Download and install htool  current: no
  --download-htool-commit=commitid
       The commit id from a git repository to use for the build of htool  current: 0
KOKKOS-KERNELS:
  --with-kokkos-kernels=<bool>
       Indicate if you wish to test for kokkos-kernels  current: 0
  --with-kokkos-kernels-dir=<dir>
       Indicate the root directory of the kokkos-kernels installation
  --with-kokkos-kernels-pkg-config=<dir>
       Look for kokkos-kernels using pkg-config utility optional directory to look in
  --with-kokkos-kernels-include=<dirs>
       Indicate the directory of the kokkos-kernels include files
  --with-kokkos-kernels-lib=<libraries: e.g. [/Users/..../libkokkos-kernels.a,...]>
       Indicate the kokkos-kernels libraries
  --download-kokkos-kernels=<no,yes,filename,url>
       Download and install kokkos-kernels  current: no
  --download-kokkos-kernels-commit=commitid
       The commit id from a git repository to use for the build of kokkos-kernels  current: 0
  --download-kokkos-kernels-shared=<bool>
       Install KOKKOS-KERNELS with shared libraries  current: 0
  --download-kokkos-kernels-cmake-arguments=string
       Additional CMake arguments for the build of kokkos-kernels  current: 0
  --with-kokkos-kernels-tpl=<bool>
       Indicate if you wish to let Kokkos-Kernels use Third-Party Libraries (TPLs)  current: 1
KOKKOS:
  --with-kokkos=<bool>
       Indicate if you wish to test for kokkos  current: 0
  --with-kokkos-dir=<dir>
       Indicate the root directory of the kokkos installation
  --with-kokkos-pkg-config=<dir>
       Look for kokkos using pkg-config utility optional directory to look in
  --with-kokkos-include=<dirs>
       Indicate the directory of the kokkos include files
  --with-kokkos-lib=<libraries: e.g. [/Users/..../libkokkos.a,...]>
       Indicate the kokkos libraries
  --download-kokkos=<no,yes,filename,url>
       Download and install kokkos  current: no
  --download-kokkos-commit=commitid
       The commit id from a git repository to use for the build of kokkos  current: 0
  --download-kokkos-shared=<bool>
       Install KOKKOS with shared libraries  current: 0
  --download-kokkos-cmake-arguments=string
       Additional CMake arguments for the build of kokkos  current: 0
  --with-kokkos-init-warnings=<bool>
       Enable/disable warnings in Kokkos initialization  current: 1
LGRIND:
  --with-lgrind=<bool>
       Indicate if you wish to test for lgrind  current: 0
  --with-lgrind-dir=<dir>
       Indicate the root directory of the lgrind installation
  --with-lgrind-pkg-config=<dir>
       Look for lgrind using pkg-config utility optional directory to look in
  --with-lgrind-include=<dirs>
       Indicate the directory of the lgrind include files
  --with-lgrind-lib=<libraries: e.g. [/Users/..../liblgrind.a,...]>
       Indicate the lgrind libraries
  --download-lgrind=<no,yes,filename,url>
       Download and install lgrind  current: no
  --download-lgrind-commit=commitid
       The commit id from a git repository to use for the build of lgrind  current: 0
LIBJPEG:
  --with-libjpeg=<bool>
       Indicate if you wish to test for libjpeg  current: 0
  --with-libjpeg-dir=<dir>
       Indicate the root directory of the libjpeg installation
  --with-libjpeg-pkg-config=<dir>
       Look for libjpeg using pkg-config utility optional directory to look in
  --with-libjpeg-include=<dirs>
       Indicate the directory of the libjpeg include files
  --with-libjpeg-lib=<libraries: e.g. [/Users/..../liblibjpeg.a,...]>
       Indicate the libjpeg libraries
  --download-libjpeg=<no,yes,filename,url>
       Download and install libjpeg  current: no
  --download-libjpeg-commit=commitid
       The commit id from a git repository to use for the build of libjpeg  current: 0
  --download-libjpeg-shared=<bool>
       Install LIBJPEG with shared libraries  current: 0
  --download-libjpeg-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of libjpeg  current: 0
LIBMESH:
  --download-libmesh=<no,yes,filename,url>
       Download and install libmesh  current: no
  --download-libmesh-commit=commitid
       The commit id from a git repository to use for the build of libmesh  current: 0
LIBPNG:
  --with-libpng=<bool>
       Indicate if you wish to test for libpng  current: 0
  --with-libpng-dir=<dir>
       Indicate the root directory of the libpng installation
  --with-libpng-pkg-config=<dir>
       Look for libpng using pkg-config utility optional directory to look in
  --with-libpng-include=<dirs>
       Indicate the directory of the libpng include files
  --with-libpng-lib=<libraries: e.g. [/Users/..../liblibpng.a,...]>
       Indicate the libpng libraries
  --download-libpng=<no,yes,filename,url>
       Download and install libpng  current: no
  --download-libpng-commit=commitid
       The commit id from a git repository to use for the build of libpng  current: 0
  --download-libpng-shared=<bool>
       Install LIBPNG with shared libraries  current: 0
  --download-libpng-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of libpng  current: 0
MED:
  --with-med=<bool>
       Indicate if you wish to test for med  current: 0
  --with-med-dir=<dir>
       Indicate the root directory of the med installation
  --with-med-pkg-config=<dir>
       Look for med using pkg-config utility optional directory to look in
  --with-med-include=<dirs>
       Indicate the directory of the med include files
  --with-med-lib=<libraries: e.g. [/Users/..../libmed.a,...]>
       Indicate the med libraries
  --download-med=<no,yes,filename,url>
       Download and install med  current: no
  --download-med-commit=commitid
       The commit id from a git repository to use for the build of med  current: 0
  --download-med-shared=<bool>
       Install MED with shared libraries  current: 0
  --download-med-cmake-arguments=string
       Additional CMake arguments for the build of med  current: 0
MEMKIND:
  --with-memkind=<bool>
       Indicate if you wish to test for memkind  current: 0
  --with-memkind-dir=<dir>
       Indicate the root directory of the memkind installation
  --with-memkind-pkg-config=<dir>
       Look for memkind using pkg-config utility optional directory to look in
  --with-memkind-include=<dirs>
       Indicate the directory of the memkind include files
  --with-memkind-lib=<libraries: e.g. [/Users/..../libmemkind.a,...]>
       Indicate the memkind libraries
MKL_CPARDISO:
  --with-mkl_cpardiso=<bool>
       Indicate if you wish to test for mkl_cpardiso  current: 0
  --with-mkl_cpardiso-dir=<dir>
       Indicate the root directory of the mkl_cpardiso installation
  --with-mkl_cpardiso-pkg-config=<dir>
       Look for mkl_cpardiso using pkg-config utility optional directory to look in
  --with-mkl_cpardiso-include=<dirs>
       Indicate the directory of the mkl_cpardiso include files
  --with-mkl_cpardiso-lib=<libraries: e.g. [/Users/..../libmkl_cpardiso.a,...]>
       Indicate the mkl_cpardiso libraries
MKL_SPARSE:
  --with-mkl_sparse=<bool>
       Indicate if you wish to test for mkl_sparse  current: 1
  --with-mkl_sparse-dir=<dir>
       Indicate the root directory of the mkl_sparse installation
  --with-mkl_sparse-pkg-config=<dir>
       Look for mkl_sparse using pkg-config utility optional directory to look in
  --with-mkl_sparse-include=<dirs>
       Indicate the directory of the mkl_sparse include files
  --with-mkl_sparse-lib=<libraries: e.g. [/Users/..../libmkl_sparse.a,...]>
       Indicate the mkl_sparse libraries
MKL_SPARSE_OPTIMIZE:
  --with-mkl_sparse_optimize=<bool>
       Indicate if you wish to test for mkl_sparse_optimize  current: 1
  --with-mkl_sparse_optimize-dir=<dir>
       Indicate the root directory of the mkl_sparse_optimize installation
  --with-mkl_sparse_optimize-pkg-config=<dir>
       Look for mkl_sparse_optimize using pkg-config utility optional directory to look in
  --with-mkl_sparse_optimize-include=<dirs>
       Indicate the directory of the mkl_sparse_optimize include files
  --with-mkl_sparse_optimize-lib=<libraries: e.g. [/Users/..../libmkl_sparse_optimize.a,...]>
       Indicate the mkl_sparse_optimize libraries
MMG:
  --with-mmg=<bool>
       Indicate if you wish to test for mmg  current: 0
  --with-mmg-dir=<dir>
       Indicate the root directory of the mmg installation
  --with-mmg-pkg-config=<dir>
       Look for mmg using pkg-config utility optional directory to look in
  --with-mmg-include=<dirs>
       Indicate the directory of the mmg include files
  --with-mmg-lib=<libraries: e.g. [/Users/..../libmmg.a,...]>
       Indicate the mmg libraries
  --download-mmg=<no,yes,filename,url>
       Download and install mmg  current: no
  --download-mmg-commit=commitid
       The commit id from a git repository to use for the build of mmg  current: 0
  --download-mmg-shared=<bool>
       Install MMG with shared libraries  current: 0
  --download-mmg-cmake-arguments=string
       Additional CMake arguments for the build of mmg  current: 0
MOOSE:
  --download-moose=<no,yes,filename,url>
       Download and install moose  current: no
  --download-moose-commit=commitid
       The commit id from a git repository to use for the build of moose  current: 0
MPE:
  --with-mpe=<bool>
       Indicate if you wish to test for mpe  current: 0
  --with-mpe-dir=<dir>
       Indicate the root directory of the mpe installation
  --with-mpe-pkg-config=<dir>
       Look for mpe using pkg-config utility optional directory to look in
  --with-mpe-include=<dirs>
       Indicate the directory of the mpe include files
  --with-mpe-lib=<libraries: e.g. [/Users/..../libmpe.a,...]>
       Indicate the mpe libraries
  --download-mpe=<no,yes,filename,url>
       Download and install mpe  current: no
  --download-mpe-commit=commitid
       The commit id from a git repository to use for the build of mpe  current: 0
  --download-mpe-shared=<bool>
       Install MPE with shared libraries  current: 0
  --download-mpe-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of mpe  current: 0
MPFR:
  --with-mpfr=<bool>
       Indicate if you wish to test for mpfr  current: 0
  --with-mpfr-dir=<dir>
       Indicate the root directory of the mpfr installation
  --with-mpfr-pkg-config=<dir>
       Look for mpfr using pkg-config utility optional directory to look in
  --with-mpfr-include=<dirs>
       Indicate the directory of the mpfr include files
  --with-mpfr-lib=<libraries: e.g. [/Users/..../libmpfr.a,...]>
       Indicate the mpfr libraries
  --download-mpfr=<no,yes,filename,url>
       Download and install mpfr  current: no
  --download-mpfr-commit=commitid
       The commit id from a git repository to use for the build of mpfr  current: 0
  --download-mpfr-shared=<bool>
       Install MPFR with shared libraries  current: 0
  --download-mpfr-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of mpfr  current: 0
MPI4PY:
  --with-mpi4py=<bool>
       Indicate if you wish to test for mpi4py  current: 0
  --with-mpi4py-dir=<dir>
       Indicate the root directory of the mpi4py installation
  --with-mpi4py-pkg-config=<dir>
       Look for mpi4py using pkg-config utility optional directory to look in
  --with-mpi4py-include=<dirs>
       Indicate the directory of the mpi4py include files
  --with-mpi4py-lib=<libraries: e.g. [/Users/..../libmpi4py.a,...]>
       Indicate the mpi4py libraries
  --download-mpi4py=<no,yes,filename,url>
       Download and install mpi4py  current: no
  --download-mpi4py-commit=commitid
       The commit id from a git repository to use for the build of mpi4py  current: 0
MSTK:
  --with-mstk=<bool>
       Indicate if you wish to test for mstk  current: 0
  --with-mstk-dir=<dir>
       Indicate the root directory of the mstk installation
  --with-mstk-pkg-config=<dir>
       Look for mstk using pkg-config utility optional directory to look in
  --with-mstk-include=<dirs>
       Indicate the directory of the mstk include files
  --with-mstk-lib=<libraries: e.g. [/Users/..../libmstk.a,...]>
       Indicate the mstk libraries
  --download-mstk=<no,yes,filename,url>
       Download and install mstk  current: no
  --download-mstk-commit=commitid
       The commit id from a git repository to use for the build of mstk  current: 0
  --download-mstk-shared=<bool>
       Install MSTK with shared libraries  current: 0
  --download-mstk-cmake-arguments=string
       Additional CMake arguments for the build of mstk  current: 0
MUPARSER:
  --with-muparser=<bool>
       Indicate if you wish to test for muparser  current: 0
  --with-muparser-dir=<dir>
       Indicate the root directory of the muparser installation
  --with-muparser-pkg-config=<dir>
       Look for muparser using pkg-config utility optional directory to look in
  --with-muparser-include=<dirs>
       Indicate the directory of the muparser include files
  --with-muparser-lib=<libraries: e.g. [/Users/..../libmuparser.a,...]>
       Indicate the muparser libraries
  --download-muparser=<no,yes,filename,url>
       Download and install muparser  current: no
  --download-muparser-commit=commitid
       The commit id from a git repository to use for the build of muparser  current: 0
  --download-muparser-shared=<bool>
       Install MUPARSER with shared libraries  current: 0
  --download-muparser-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of muparser  current: 0
OPENCL:
  --with-opencl=<bool>
       Indicate if you wish to test for opencl  current: 0
  --with-opencl-dir=<dir>
       Indicate the root directory of the opencl installation
  --with-opencl-pkg-config=<dir>
       Look for opencl using pkg-config utility optional directory to look in
  --with-opencl-include=<dirs>
       Indicate the directory of the opencl include files
  --with-opencl-lib=<libraries: e.g. [/Users/..../libopencl.a,...]>
       Indicate the opencl libraries
OPENGLES:
  --with-opengles=<bool>
       Indicate if you wish to test for opengles  current: 0
  --with-opengles-dir=<dir>
       Indicate the root directory of the opengles installation
  --with-opengles-pkg-config=<dir>
       Look for opengles using pkg-config utility optional directory to look in
  --with-opengles-include=<dirs>
       Indicate the directory of the opengles include files
  --with-opengles-lib=<libraries: e.g. [/Users/..../libopengles.a,...]>
       Indicate the opengles libraries
P4EST:
  --with-p4est=<bool>
       Indicate if you wish to test for p4est  current: 0
  --with-p4est-dir=<dir>
       Indicate the root directory of the p4est installation
  --with-p4est-pkg-config=<dir>
       Look for p4est using pkg-config utility optional directory to look in
  --with-p4est-include=<dirs>
       Indicate the directory of the p4est include files
  --with-p4est-lib=<libraries: e.g. [/Users/..../libp4est.a,...]>
       Indicate the p4est libraries
  --download-p4est=<no,yes,filename,url>
       Download and install p4est  current: no
  --download-p4est-commit=commitid
       The commit id from a git repository to use for the build of p4est  current: 0
  --download-p4est-shared=<bool>
       Install P4EST with shared libraries  current: 0
  --download-p4est-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of p4est  current: 0
  --with-p4est-debugging=<bool>
       Use p4est's (sometimes computationally intensive) debugging  current: 0
PARMS:
  --with-parms=<bool>
       Indicate if you wish to test for pARMS  current: 0
  --with-parms-dir=<dir>
       Indicate the root directory of the pARMS installation
  --with-parms-pkg-config=<dir>
       Look for pARMS using pkg-config utility optional directory to look in
  --with-parms-include=<dirs>
       Indicate the directory of the pARMS include files
  --with-parms-lib=<libraries: e.g. [/Users/..../libparms.a,...]>
       Indicate the pARMS libraries
  --download-parms=<no,yes,filename,url>
       Download and install pARMS  current: no
  --download-parms-commit=commitid
       The commit id from a git repository to use for the build of pARMS  current: 0
PAMI:
  --with-pami=<bool>
       Indicate if you wish to test for pami  current: 0
  --with-pami-dir=<dir>
       Indicate the root directory of the pami installation
  --with-pami-pkg-config=<dir>
       Look for pami using pkg-config utility optional directory to look in
  --with-pami-include=<dirs>
       Indicate the directory of the pami include files
  --with-pami-lib=<libraries: e.g. [/Users/..../libpami.a,...]>
       Indicate the pami libraries
PARMMG:
  --with-parmmg=<bool>
       Indicate if you wish to test for parmmg  current: 0
  --with-parmmg-dir=<dir>
       Indicate the root directory of the parmmg installation
  --with-parmmg-pkg-config=<dir>
       Look for parmmg using pkg-config utility optional directory to look in
  --with-parmmg-include=<dirs>
       Indicate the directory of the parmmg include files
  --with-parmmg-lib=<libraries: e.g. [/Users/..../libparmmg.a,...]>
       Indicate the parmmg libraries
  --download-parmmg=<no,yes,filename,url>
       Download and install parmmg  current: no
  --download-parmmg-commit=commitid
       The commit id from a git repository to use for the build of parmmg  current: 0
  --download-parmmg-shared=<bool>
       Install PARMMG with shared libraries  current: 0
  --download-parmmg-cmake-arguments=string
       Additional CMake arguments for the build of parmmg  current: 0
PRAGMATIC:
  --with-pragmatic=<bool>
       Indicate if you wish to test for pragmatic  current: 0
  --with-pragmatic-dir=<dir>
       Indicate the root directory of the pragmatic installation
  --with-pragmatic-pkg-config=<dir>
       Look for pragmatic using pkg-config utility optional directory to look in
  --with-pragmatic-include=<dirs>
       Indicate the directory of the pragmatic include files
  --with-pragmatic-lib=<libraries: e.g. [/Users/..../libpragmatic.a,...]>
       Indicate the pragmatic libraries
  --download-pragmatic=<no,yes,filename,url>
       Download and install pragmatic  current: no
  --download-pragmatic-commit=commitid
       The commit id from a git repository to use for the build of pragmatic  current: 0
  --download-pragmatic-shared=<bool>
       Install PRAGMATIC with shared libraries  current: 0
  --download-pragmatic-cmake-arguments=string
       Additional CMake arguments for the build of pragmatic  current: 0
RADAU5:
  --with-radau5=<bool>
       Indicate if you wish to test for radau5  current: 0
  --with-radau5-dir=<dir>
       Indicate the root directory of the radau5 installation
  --with-radau5-pkg-config=<dir>
       Look for radau5 using pkg-config utility optional directory to look in
  --with-radau5-include=<dirs>
       Indicate the directory of the radau5 include files
  --with-radau5-lib=<libraries: e.g. [/Users/..../libradau5.a,...]>
       Indicate the radau5 libraries
  --download-radau5=<no,yes,filename,url>
       Download and install radau5  current: no
  --download-radau5-commit=commitid
       The commit id from a git repository to use for the build of radau5  current: 0
RAJA:
  --with-raja=<bool>
       Indicate if you wish to test for raja  current: 0
  --with-raja-dir=<dir>
       Indicate the root directory of the raja installation
  --with-raja-pkg-config=<dir>
       Look for raja using pkg-config utility optional directory to look in
  --with-raja-include=<dirs>
       Indicate the directory of the raja include files
  --with-raja-lib=<libraries: e.g. [/Users/..../libraja.a,...]>
       Indicate the raja libraries
  --download-raja=<no,yes,filename,url>
       Download and install raja  current: no
  --download-raja-commit=commitid
       The commit id from a git repository to use for the build of raja  current: 0
  --download-raja-shared=<bool>
       Install RAJA with shared libraries  current: 0
  --download-raja-cmake-arguments=string
       Additional CMake arguments for the build of raja  current: 0
REVOLVE:
  --with-revolve=<bool>
       Indicate if you wish to test for revolve  current: 0
  --with-revolve-dir=<dir>
       Indicate the root directory of the revolve installation
  --with-revolve-pkg-config=<dir>
       Look for revolve using pkg-config utility optional directory to look in
  --with-revolve-include=<dirs>
       Indicate the directory of the revolve include files
  --with-revolve-lib=<libraries: e.g. [/Users/..../librevolve.a,...]>
       Indicate the revolve libraries
  --download-revolve=<no,yes,filename,url>
       Download and install revolve  current: no
  --download-revolve-commit=commitid
       The commit id from a git repository to use for the build of revolve  current: 0
SAWS:
  --with-saws=<bool>
       Indicate if you wish to test for saws  current: 0
  --with-saws-dir=<dir>
       Indicate the root directory of the saws installation
  --with-saws-pkg-config=<dir>
       Look for saws using pkg-config utility optional directory to look in
  --with-saws-include=<dirs>
       Indicate the directory of the saws include files
  --with-saws-lib=<libraries: e.g. [/Users/..../libsaws.a,...]>
       Indicate the saws libraries
  --download-saws=<no,yes,filename,url>
       Download and install saws  current: no
  --download-saws-commit=commitid
       The commit id from a git repository to use for the build of saws  current: 0
  --download-saws-shared=<bool>
       Install SAWS with shared libraries  current: 0
  --download-saws-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of saws  current: 0
SOWING:
  --with-sowing=<bool>
       Indicate if you wish to test for sowing  current: 0
  --with-sowing-dir=<dir>
       Indicate the root directory of the sowing installation
  --with-sowing-pkg-config=<dir>
       Look for sowing using pkg-config utility optional directory to look in
  --with-sowing-include=<dirs>
       Indicate the directory of the sowing include files
  --with-sowing-lib=<libraries: e.g. [/Users/..../libsowing.a,...]>
       Indicate the sowing libraries
  --download-sowing=<no,yes,filename,url>
       Download and install sowing  current: no
  --download-sowing-commit=commitid
       The commit id from a git repository to use for the build of sowing  current: 0
  --download-sowing-shared=<bool>
       Install SOWING with shared libraries  current: 0
  --download-sowing-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of sowing  current: 0
  --download-sowing-cc=<prog>
       C compiler for sowing configure
  --download-sowing-cxx=<prog>
       CXX compiler for sowing configure
  --download-sowing-cpp=<prog>
       CPP for sowing configure
  --download-sowing-cxxpp=<prog>
       CXX CPP for sowing configure
SPAI:
  --with-spai=<bool>
       Indicate if you wish to test for spai  current: 0
  --with-spai-dir=<dir>
       Indicate the root directory of the spai installation
  --with-spai-pkg-config=<dir>
       Look for spai using pkg-config utility optional directory to look in
  --with-spai-include=<dirs>
       Indicate the directory of the spai include files
  --with-spai-lib=<libraries: e.g. [/Users/..../libspai.a,...]>
       Indicate the spai libraries
  --download-spai=<no,yes,filename,url>
       Download and install spai  current: no
  --download-spai-commit=commitid
       The commit id from a git repository to use for the build of spai  current: 0
SPRNG:
  --with-sprng=<bool>
       Indicate if you wish to test for sprng  current: 0
  --with-sprng-dir=<dir>
       Indicate the root directory of the sprng installation
  --with-sprng-pkg-config=<dir>
       Look for sprng using pkg-config utility optional directory to look in
  --with-sprng-include=<dirs>
       Indicate the directory of the sprng include files
  --with-sprng-lib=<libraries: e.g. [/Users/..../libsprng.a,...]>
       Indicate the sprng libraries
  --download-sprng=<no,yes,filename,url>
       Download and install sprng  current: no
  --download-sprng-commit=commitid
       The commit id from a git repository to use for the build of sprng  current: 0
SSL:
  --with-ssl=<bool>
       Indicate if you wish to test for ssl  current: 0
  --with-ssl-dir=<dir>
       Indicate the root directory of the ssl installation
  --with-ssl-pkg-config=<dir>
       Look for ssl using pkg-config utility optional directory to look in
  --with-ssl-include=<dirs>
       Indicate the directory of the ssl include files
  --with-ssl-lib=<libraries: e.g. [/Users/..../libssl.a,...]>
       Indicate the ssl libraries
  --with-ssl-certificate=<bool>
       Require certificate with SSL  current: 0
STRUMPACK:
  --with-strumpack=<bool>
       Indicate if you wish to test for strumpack  current: 0
  --with-strumpack-dir=<dir>
       Indicate the root directory of the strumpack installation
  --with-strumpack-pkg-config=<dir>
       Look for strumpack using pkg-config utility optional directory to look in
  --with-strumpack-include=<dirs>
       Indicate the directory of the strumpack include files
  --with-strumpack-lib=<libraries: e.g. [/Users/..../libstrumpack.a,...]>
       Indicate the strumpack libraries
  --download-strumpack=<no,yes,filename,url>
       Download and install strumpack  current: no
  --download-strumpack-commit=commitid
       The commit id from a git repository to use for the build of strumpack  current: 0
  --download-strumpack-shared=<bool>
       Install STRUMPACK with shared libraries  current: 0
  --download-strumpack-cmake-arguments=string
       Additional CMake arguments for the build of strumpack  current: 0
SUNDIALS2:
  --with-sundials2=<bool>
       Indicate if you wish to test for sundials2  current: 0
  --with-sundials2-dir=<dir>
       Indicate the root directory of the sundials2 installation
  --with-sundials2-pkg-config=<dir>
       Look for sundials2 using pkg-config utility optional directory to look in
  --with-sundials2-include=<dirs>
       Indicate the directory of the sundials2 include files
  --with-sundials2-lib=<libraries: e.g. [/Users/..../libsundials2.a,...]>
       Indicate the sundials2 libraries
  --download-sundials2=<no,yes,filename,url>
       Download and install sundials2  current: no
  --download-sundials2-commit=commitid
       The commit id from a git repository to use for the build of sundials2  current: 0
  --download-sundials2-shared=<bool>
       Install SUNDIALS2 with shared libraries  current: 0
  --download-sundials2-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of sundials2  current: 0
TCHEM:
  --with-tchem=<bool>
       Indicate if you wish to test for tchem  current: 0
  --with-tchem-dir=<dir>
       Indicate the root directory of the tchem installation
  --with-tchem-pkg-config=<dir>
       Look for tchem using pkg-config utility optional directory to look in
  --with-tchem-include=<dirs>
       Indicate the directory of the tchem include files
  --with-tchem-lib=<libraries: e.g. [/Users/..../libtchem.a,...]>
       Indicate the tchem libraries
  --download-tchem=<no,yes,filename,url>
       Download and install tchem  current: no
  --download-tchem-commit=commitid
       The commit id from a git repository to use for the build of tchem  current: 0
TETGEN:
  --with-tetgen=<bool>
       Indicate if you wish to test for tetgen  current: 0
  --with-tetgen-dir=<dir>
       Indicate the root directory of the tetgen installation
  --with-tetgen-pkg-config=<dir>
       Look for tetgen using pkg-config utility optional directory to look in
  --with-tetgen-include=<dirs>
       Indicate the directory of the tetgen include files
  --with-tetgen-lib=<libraries: e.g. [/Users/..../libtetgen.a,...]>
       Indicate the tetgen libraries
  --download-tetgen=<no,yes,filename,url>
       Download and install tetgen  current: no
  --download-tetgen-commit=commitid
       The commit id from a git repository to use for the build of tetgen  current: 0
UNITTESTCPP:
  --with-unittestcpp=<bool>
       Indicate if you wish to test for unittestcpp  current: 0
  --with-unittestcpp-dir=<dir>
       Indicate the root directory of the unittestcpp installation
  --with-unittestcpp-pkg-config=<dir>
       Look for unittestcpp using pkg-config utility optional directory to look in
  --with-unittestcpp-include=<dirs>
       Indicate the directory of the unittestcpp include files
  --with-unittestcpp-lib=<libraries: e.g. [/Users/..../libunittestcpp.a,...]>
       Indicate the unittestcpp libraries
  --download-unittestcpp=<no,yes,filename,url>
       Download and install unittestcpp  current: no
  --download-unittestcpp-commit=commitid
       The commit id from a git repository to use for the build of unittestcpp  current: 0
  --download-unittestcpp-shared=<bool>
       Install UNITTESTCPP with shared libraries  current: 0
  --download-unittestcpp-cmake-arguments=string
       Additional CMake arguments for the build of unittestcpp  current: 0
VIENNACL:
  --with-viennacl=<bool>
       Indicate if you wish to test for viennacl  current: 0
  --with-viennacl-dir=<dir>
       Indicate the root directory of the viennacl installation
  --with-viennacl-pkg-config=<dir>
       Look for viennacl using pkg-config utility optional directory to look in
  --with-viennacl-include=<dirs>
       Indicate the directory of the viennacl include files
  --with-viennacl-lib=<libraries: e.g. [/Users/..../libviennacl.a,...]>
       Indicate the viennacl libraries
  --download-viennacl=<no,yes,filename,url>
       Download and install viennacl  current: no
  --download-viennacl-commit=commitid
       The commit id from a git repository to use for the build of viennacl  current: 0
XSDKTRILINOS:
  --with-xsdktrilinos=<bool>
       Indicate if you wish to test for xSDKTrilinos  current: 0
  --with-xsdktrilinos-dir=<dir>
       Indicate the root directory of the xSDKTrilinos installation
  --with-xsdktrilinos-pkg-config=<dir>
       Look for xSDKTrilinos using pkg-config utility optional directory to look in
  --with-xsdktrilinos-include=<dirs>
       Indicate the directory of the xSDKTrilinos include files
  --with-xsdktrilinos-lib=<libraries: e.g. [/Users/..../libxsdktrilinos.a,...]>
       Indicate the xSDKTrilinos libraries
  --download-xsdktrilinos=<no,yes,filename,url>
       Download and install xSDKTrilinos  current: no
  --download-xsdktrilinos-commit=commitid
       The commit id from a git repository to use for the build of xSDKTrilinos  current: 0
  --download-xsdktrilinos-shared=<bool>
       Install XSDKTRILINOS with shared libraries  current: 0
  --download-xsdktrilinos-cmake-arguments=string
       Additional CMake arguments for the build of xSDKTrilinos  current: 0
YAML:
  --with-yaml=<bool>
       Indicate if you wish to test for yaml  current: 0
  --with-yaml-dir=<dir>
       Indicate the root directory of the yaml installation
  --with-yaml-pkg-config=<dir>
       Look for yaml using pkg-config utility optional directory to look in
  --with-yaml-include=<dirs>
       Indicate the directory of the yaml include files
  --with-yaml-lib=<libraries: e.g. [/Users/..../libyaml.a,...]>
       Indicate the yaml libraries
  --download-yaml=<no,yes,filename,url>
       Download and install yaml  current: no
  --download-yaml-commit=commitid
       The commit id from a git repository to use for the build of yaml  current: 0
  --download-yaml-shared=<bool>
       Install YAML with shared libraries  current: 0
  --download-yaml-configure-arguments=string
       Additional GNU autoconf configure arguments for the build of yaml  current: 0
ZSTD:
  --with-zstd=<bool>
       Indicate if you wish to test for zstd  current: 0
  --with-zstd-dir=<dir>
       Indicate the root directory of the zstd installation
  --with-zstd-pkg-config=<dir>
       Look for zstd using pkg-config utility optional directory to look in
  --with-zstd-include=<dirs>
       Indicate the directory of the zstd include files
  --with-zstd-lib=<libraries: e.g. [/Users/..../libzstd.a,...]>
       Indicate the zstd libraries
  --download-zstd=<no,yes,filename,url>
       Download and install zstd  current: no
  --download-zstd-commit=commitid
       The commit id from a git repository to use for the build of zstd  current: 0
